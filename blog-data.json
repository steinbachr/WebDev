{"db":[{"meta":{"exported_on":1475908782616,"version":"009"},"data":{"app_fields":[],"app_settings":[],"apps":[],"permissions":[{"id":4,"uuid":"5dd69cf2-e248-48b6-a6ec-21cdff10c101","name":"Export database","object_type":"db","action_type":"exportContent","object_id":null,"created_at":"2014-08-11T15:29:26.000Z","created_by":1,"updated_at":"2014-08-11T15:29:26.000Z","updated_by":1},{"id":5,"uuid":"14970ed8-110c-4166-a6dd-70ec1ec50973","name":"Import database","object_type":"db","action_type":"importContent","object_id":null,"created_at":"2014-08-11T15:29:26.000Z","created_by":1,"updated_at":"2014-08-11T15:29:26.000Z","updated_by":1},{"id":6,"uuid":"672dffa4-b16a-4951-9ec3-3fbaa8df56f2","name":"Delete all content","object_type":"db","action_type":"deleteAllContent","object_id":null,"created_at":"2014-08-11T15:29:26.000Z","created_by":1,"updated_at":"2014-08-11T15:29:26.000Z","updated_by":1},{"id":7,"uuid":"77ded433-e04e-499f-a8aa-29851c5b549f","name":"Send mail","object_type":"mail","action_type":"send","object_id":null,"created_at":"2014-08-11T15:29:26.000Z","created_by":1,"updated_at":"2014-08-11T15:29:26.000Z","updated_by":1},{"id":8,"uuid":"43eb6177-aae3-4a56-bdd0-318f5f71fe4e","name":"Browse notifications","object_type":"notification","action_type":"browse","object_id":null,"created_at":"2014-08-11T15:29:26.000Z","created_by":1,"updated_at":"2014-08-11T15:29:26.000Z","updated_by":1},{"id":9,"uuid":"360e80c7-d3c2-4eb8-9de0-d0c80432d2aa","name":"Add notifications","object_type":"notification","action_type":"add","object_id":null,"created_at":"2014-08-11T15:29:26.000Z","created_by":1,"updated_at":"2014-08-11T15:29:26.000Z","updated_by":1},{"id":10,"uuid":"59cddb3f-68d4-4eaf-9131-9f753f003d02","name":"Delete notifications","object_type":"notification","action_type":"destroy","object_id":null,"created_at":"2014-08-11T15:29:26.000Z","created_by":1,"updated_at":"2014-08-11T15:29:26.000Z","updated_by":1},{"id":11,"uuid":"5d7dbc4b-b2d2-4847-bdea-2103c35b9e33","name":"Browse posts","object_type":"post","action_type":"browse","object_id":null,"created_at":"2014-08-11T15:29:26.000Z","created_by":1,"updated_at":"2014-08-11T15:29:26.000Z","updated_by":1},{"id":12,"uuid":"a18c2fda-8336-42bc-a8d6-a332d6e5a087","name":"Read posts","object_type":"post","action_type":"read","object_id":null,"created_at":"2014-08-11T15:29:26.000Z","created_by":1,"updated_at":"2014-08-11T15:29:26.000Z","updated_by":1},{"id":13,"uuid":"e9257134-8a52-4a7c-b8c3-276d1c1cb098","name":"Edit posts","object_type":"post","action_type":"edit","object_id":null,"created_at":"2014-08-11T15:29:26.000Z","created_by":1,"updated_at":"2014-08-11T15:29:26.000Z","updated_by":1},{"id":14,"uuid":"54ed325f-eeca-4c86-8467-afdd45828a8b","name":"Add posts","object_type":"post","action_type":"add","object_id":null,"created_at":"2014-08-11T15:29:26.000Z","created_by":1,"updated_at":"2014-08-11T15:29:26.000Z","updated_by":1},{"id":15,"uuid":"1a862cfa-bf10-4b47-9263-a01d6912263b","name":"Delete posts","object_type":"post","action_type":"destroy","object_id":null,"created_at":"2014-08-11T15:29:26.000Z","created_by":1,"updated_at":"2014-08-11T15:29:26.000Z","updated_by":1},{"id":16,"uuid":"e09a0385-6d8b-4051-962f-de5b057143d8","name":"Browse settings","object_type":"setting","action_type":"browse","object_id":null,"created_at":"2014-08-11T15:29:26.000Z","created_by":1,"updated_at":"2014-08-11T15:29:26.000Z","updated_by":1},{"id":17,"uuid":"35672b49-7780-4982-b9dc-1565aa63810a","name":"Read settings","object_type":"setting","action_type":"read","object_id":null,"created_at":"2014-08-11T15:29:26.000Z","created_by":1,"updated_at":"2014-08-11T15:29:26.000Z","updated_by":1},{"id":18,"uuid":"4447b567-bec0-452b-9e85-16955629d5a7","name":"Edit settings","object_type":"setting","action_type":"edit","object_id":null,"created_at":"2014-08-11T15:29:26.000Z","created_by":1,"updated_at":"2014-08-11T15:29:26.000Z","updated_by":1},{"id":19,"uuid":"41741aad-dc53-4623-9756-a65da236d275","name":"Generate slugs","object_type":"slug","action_type":"generate","object_id":null,"created_at":"2014-08-11T15:29:26.000Z","created_by":1,"updated_at":"2014-08-11T15:29:26.000Z","updated_by":1},{"id":20,"uuid":"749b2e37-fb23-4370-a041-c563acaaf0be","name":"Browse tags","object_type":"tag","action_type":"browse","object_id":null,"created_at":"2014-08-11T15:29:26.000Z","created_by":1,"updated_at":"2014-08-11T15:29:26.000Z","updated_by":1},{"id":21,"uuid":"ea726585-1bae-4665-8a9b-42e77d5ff739","name":"Read tags","object_type":"tag","action_type":"read","object_id":null,"created_at":"2014-08-11T15:29:26.000Z","created_by":1,"updated_at":"2014-08-11T15:29:26.000Z","updated_by":1},{"id":22,"uuid":"ee6a6ce7-8b28-463a-96ea-bccd5b5325b0","name":"Edit tags","object_type":"tag","action_type":"edit","object_id":null,"created_at":"2014-08-11T15:29:26.000Z","created_by":1,"updated_at":"2014-08-11T15:29:26.000Z","updated_by":1},{"id":23,"uuid":"25213fb8-ffa7-4e81-8068-dae4f057e109","name":"Add tags","object_type":"tag","action_type":"add","object_id":null,"created_at":"2014-08-11T15:29:26.000Z","created_by":1,"updated_at":"2014-08-11T15:29:26.000Z","updated_by":1},{"id":24,"uuid":"ffc4d150-08bc-4102-8677-99de490ffae6","name":"Delete tags","object_type":"tag","action_type":"destroy","object_id":null,"created_at":"2014-08-11T15:29:26.000Z","created_by":1,"updated_at":"2014-08-11T15:29:26.000Z","updated_by":1},{"id":25,"uuid":"7737f7b1-b2a8-4f75-aa32-ad14a670ca83","name":"Browse themes","object_type":"theme","action_type":"browse","object_id":null,"created_at":"2014-08-11T15:29:26.000Z","created_by":1,"updated_at":"2014-08-11T15:29:26.000Z","updated_by":1},{"id":26,"uuid":"bf842a35-a0b9-4f5b-81fa-96a691f08f7b","name":"Edit themes","object_type":"theme","action_type":"edit","object_id":null,"created_at":"2014-08-11T15:29:26.000Z","created_by":1,"updated_at":"2014-08-11T15:29:26.000Z","updated_by":1},{"id":27,"uuid":"1e44f42a-5503-45a9-9e79-c043d1a0844c","name":"Browse users","object_type":"user","action_type":"browse","object_id":null,"created_at":"2014-08-11T15:29:26.000Z","created_by":1,"updated_at":"2014-08-11T15:29:26.000Z","updated_by":1},{"id":28,"uuid":"a487ef1e-2f1e-4efc-9964-ddc4bd7c434d","name":"Read users","object_type":"user","action_type":"read","object_id":null,"created_at":"2014-08-11T15:29:26.000Z","created_by":1,"updated_at":"2014-08-11T15:29:26.000Z","updated_by":1},{"id":29,"uuid":"4e193d78-bc36-4073-8d13-0b17246d9e53","name":"Edit users","object_type":"user","action_type":"edit","object_id":null,"created_at":"2014-08-11T15:29:26.000Z","created_by":1,"updated_at":"2014-08-11T15:29:26.000Z","updated_by":1},{"id":30,"uuid":"64357443-c7f0-49f6-a5c5-d5e7dba40fff","name":"Add users","object_type":"user","action_type":"add","object_id":null,"created_at":"2014-08-11T15:29:26.000Z","created_by":1,"updated_at":"2014-08-11T15:29:26.000Z","updated_by":1},{"id":31,"uuid":"c293d3d8-62a4-4aaa-9c15-542aed9c2831","name":"Delete users","object_type":"user","action_type":"destroy","object_id":null,"created_at":"2014-08-11T15:29:26.000Z","created_by":1,"updated_at":"2014-08-11T15:29:26.000Z","updated_by":1},{"id":32,"uuid":"78b9cad8-c145-4b66-accf-d8568d8cea50","name":"Assign a role","object_type":"role","action_type":"assign","object_id":null,"created_at":"2014-08-11T15:29:26.000Z","created_by":1,"updated_at":"2014-08-11T15:29:26.000Z","updated_by":1},{"id":33,"uuid":"05d5e49b-0990-4af6-b411-26c9096cb46b","name":"Browse roles","object_type":"role","action_type":"browse","object_id":null,"created_at":"2014-08-11T15:29:26.000Z","created_by":1,"updated_at":"2014-08-11T15:29:26.000Z","updated_by":1},{"id":34,"uuid":"5ef70af7-1348-4330-9658-e2bb441d15d8","name":"Browse clients","object_type":"client","action_type":"browse","object_id":null,"created_at":"2016-05-18T12:08:37.000Z","created_by":1,"updated_at":"2016-05-18T12:08:37.000Z","updated_by":1},{"id":35,"uuid":"41e9bc41-5ac3-4a98-a90b-646c2c5d9038","name":"Read clients","object_type":"client","action_type":"read","object_id":null,"created_at":"2016-05-18T12:08:37.000Z","created_by":1,"updated_at":"2016-05-18T12:08:37.000Z","updated_by":1},{"id":36,"uuid":"908dc85f-fc51-4a1c-be3c-b8ff3c4c6483","name":"Edit clients","object_type":"client","action_type":"edit","object_id":null,"created_at":"2016-05-18T12:08:37.000Z","created_by":1,"updated_at":"2016-05-18T12:08:37.000Z","updated_by":1},{"id":37,"uuid":"cf17cd03-7cc2-4ad1-8bb2-b1afecfac453","name":"Add clients","object_type":"client","action_type":"add","object_id":null,"created_at":"2016-05-18T12:08:37.000Z","created_by":1,"updated_at":"2016-05-18T12:08:37.000Z","updated_by":1},{"id":38,"uuid":"030b568b-7514-4d24-b166-0722da93f87a","name":"Delete clients","object_type":"client","action_type":"destroy","object_id":null,"created_at":"2016-05-18T12:08:37.000Z","created_by":1,"updated_at":"2016-05-18T12:08:37.000Z","updated_by":1},{"id":39,"uuid":"19fd7dea-23ab-4ec3-a8c5-67059be40dbe","name":"Browse subscribers","object_type":"subscriber","action_type":"browse","object_id":null,"created_at":"2016-05-18T12:08:37.000Z","created_by":1,"updated_at":"2016-05-18T12:08:37.000Z","updated_by":1},{"id":40,"uuid":"a7b9311f-6639-4e21-b1e6-4fd31b2d4972","name":"Read subscribers","object_type":"subscriber","action_type":"read","object_id":null,"created_at":"2016-05-18T12:08:37.000Z","created_by":1,"updated_at":"2016-05-18T12:08:37.000Z","updated_by":1},{"id":41,"uuid":"0f116964-8a72-447f-8069-9b92f3b203b7","name":"Edit subscribers","object_type":"subscriber","action_type":"edit","object_id":null,"created_at":"2016-05-18T12:08:37.000Z","created_by":1,"updated_at":"2016-05-18T12:08:37.000Z","updated_by":1},{"id":42,"uuid":"5379e5db-8c4a-499e-afa1-f92ae881ca78","name":"Add subscribers","object_type":"subscriber","action_type":"add","object_id":null,"created_at":"2016-05-18T12:08:37.000Z","created_by":1,"updated_at":"2016-05-18T12:08:37.000Z","updated_by":1},{"id":43,"uuid":"bedbc956-0237-4f9f-a063-86bbafb81ed7","name":"Delete subscribers","object_type":"subscriber","action_type":"destroy","object_id":null,"created_at":"2016-05-18T12:08:37.000Z","created_by":1,"updated_at":"2016-05-18T12:08:37.000Z","updated_by":1},{"id":44,"uuid":"9392f411-644c-4669-82bd-8079f088a76a","name":"Upload themes","object_type":"theme","action_type":"add","object_id":null,"created_at":"2016-08-29T13:48:34.000Z","created_by":1,"updated_at":"2016-08-29T13:48:34.000Z","updated_by":1},{"id":45,"uuid":"9032a1f6-9c68-404f-9e66-ad6e38ffbc6c","name":"Download themes","object_type":"theme","action_type":"read","object_id":null,"created_at":"2016-08-29T13:48:34.000Z","created_by":1,"updated_at":"2016-08-29T13:48:34.000Z","updated_by":1},{"id":46,"uuid":"5c1e1fb5-c2e9-40d0-8537-4f6942e1f44a","name":"Delete themes","object_type":"theme","action_type":"destroy","object_id":null,"created_at":"2016-08-29T13:48:34.000Z","created_by":1,"updated_at":"2016-08-29T13:48:34.000Z","updated_by":1}],"permissions_apps":[],"permissions_roles":[{"id":4,"role_id":1,"permission_id":4},{"id":5,"role_id":1,"permission_id":5},{"id":6,"role_id":1,"permission_id":6},{"id":7,"role_id":1,"permission_id":7},{"id":8,"role_id":1,"permission_id":8},{"id":9,"role_id":1,"permission_id":9},{"id":10,"role_id":1,"permission_id":10},{"id":11,"role_id":1,"permission_id":11},{"id":12,"role_id":1,"permission_id":12},{"id":13,"role_id":1,"permission_id":13},{"id":14,"role_id":1,"permission_id":14},{"id":15,"role_id":1,"permission_id":15},{"id":16,"role_id":1,"permission_id":16},{"id":17,"role_id":1,"permission_id":17},{"id":18,"role_id":1,"permission_id":18},{"id":19,"role_id":1,"permission_id":19},{"id":20,"role_id":1,"permission_id":20},{"id":21,"role_id":1,"permission_id":21},{"id":22,"role_id":1,"permission_id":22},{"id":23,"role_id":1,"permission_id":23},{"id":24,"role_id":1,"permission_id":24},{"id":25,"role_id":1,"permission_id":25},{"id":26,"role_id":1,"permission_id":26},{"id":27,"role_id":1,"permission_id":27},{"id":28,"role_id":1,"permission_id":28},{"id":29,"role_id":1,"permission_id":29},{"id":30,"role_id":1,"permission_id":30},{"id":31,"role_id":1,"permission_id":31},{"id":32,"role_id":1,"permission_id":32},{"id":33,"role_id":1,"permission_id":33},{"id":34,"role_id":2,"permission_id":11},{"id":35,"role_id":2,"permission_id":12},{"id":36,"role_id":2,"permission_id":13},{"id":37,"role_id":2,"permission_id":14},{"id":38,"role_id":2,"permission_id":15},{"id":39,"role_id":2,"permission_id":16},{"id":40,"role_id":2,"permission_id":17},{"id":41,"role_id":2,"permission_id":19},{"id":42,"role_id":2,"permission_id":20},{"id":43,"role_id":2,"permission_id":21},{"id":44,"role_id":2,"permission_id":22},{"id":45,"role_id":2,"permission_id":23},{"id":46,"role_id":2,"permission_id":24},{"id":47,"role_id":2,"permission_id":27},{"id":48,"role_id":2,"permission_id":28},{"id":49,"role_id":2,"permission_id":29},{"id":50,"role_id":2,"permission_id":30},{"id":51,"role_id":2,"permission_id":31},{"id":52,"role_id":2,"permission_id":32},{"id":53,"role_id":2,"permission_id":33},{"id":54,"role_id":3,"permission_id":11},{"id":55,"role_id":3,"permission_id":12},{"id":56,"role_id":3,"permission_id":14},{"id":57,"role_id":3,"permission_id":16},{"id":58,"role_id":3,"permission_id":17},{"id":59,"role_id":3,"permission_id":19},{"id":60,"role_id":3,"permission_id":20},{"id":61,"role_id":3,"permission_id":21},{"id":62,"role_id":3,"permission_id":23},{"id":63,"role_id":3,"permission_id":27},{"id":64,"role_id":3,"permission_id":28},{"id":65,"role_id":3,"permission_id":33},{"id":66,"role_id":1,"permission_id":34},{"id":67,"role_id":1,"permission_id":35},{"id":68,"role_id":1,"permission_id":36},{"id":69,"role_id":1,"permission_id":37},{"id":70,"role_id":1,"permission_id":38},{"id":71,"role_id":2,"permission_id":34},{"id":72,"role_id":2,"permission_id":35},{"id":73,"role_id":2,"permission_id":36},{"id":74,"role_id":2,"permission_id":37},{"id":75,"role_id":2,"permission_id":38},{"id":76,"role_id":3,"permission_id":35},{"id":77,"role_id":3,"permission_id":34},{"id":78,"role_id":3,"permission_id":36},{"id":79,"role_id":3,"permission_id":37},{"id":80,"role_id":3,"permission_id":38},{"id":81,"role_id":1,"permission_id":39},{"id":82,"role_id":1,"permission_id":40},{"id":83,"role_id":1,"permission_id":41},{"id":84,"role_id":1,"permission_id":42},{"id":85,"role_id":1,"permission_id":43},{"id":86,"role_id":2,"permission_id":42},{"id":87,"role_id":3,"permission_id":42},{"id":88,"role_id":1,"permission_id":44},{"id":89,"role_id":1,"permission_id":45},{"id":90,"role_id":1,"permission_id":46}],"permissions_users":[],"posts":[{"id":1,"uuid":"6d3c310f-43c2-4ba0-8355-1704cc5927c8","title":"An Inaugural Post...again.","slug":"inaugural-address","markdown":"\n\nI've tried to write blogs before. Three times in fact I've started a blog, wrote one or two posts, and then stopped. Don't believe me? Here you go: [first blog attempt](https://www.blogger.com/blogger.g?blogID=2103813045682283353#overview/src=dashboard). Unfortunately I can't show the other two because they're down so you'll have to just take my word for it. Utter failure. \n\nBut this time it's different. I vow to keep up with this blog. Everyone else can do it, so damnit I can too.\n\n---\n\n###About Bobs Blog\n\n\nAs the blog caption insinuates, what I write will be heavily geared towards programming. Challenges I'm having, interesting solutions to problems, and other code-y (pronounced CO-DEE) stuff will be the focus, **I think**. No promises. No promises for writing quality and no promises for content, those are the disclaimers for this blog. Realistically, some posts will probably be about Python while some will be about my efforts trying to launch my venture, [BackStep](http://www.back-step.com), while others will be about the upcoming World Cup (CAN'T WAIT!). If you're **really** lucky, I'll write about some of the problems highlighted in the book I've been reading, [The Outer Limits Of Reason](http://mitpress.mit.edu/books/outer-limits-reason) by Noson S. Yanofsky. Real mind-fuck.\n\n\n---\n\nIn conclusion, read my blog. Please. Please read my blog and tell me how great it is. And so I make my exit, leaving you with this quote from a wise man.\n\n> *RAMMMMPAAAAAAAAAGE* <br />\n> - Sterling Archer\n","html":"<p>I've tried to write blogs before. Three times in fact I've started a blog, wrote one or two posts, and then stopped. Don't believe me? Here you go: <a href=\"https://www.blogger.com/blogger.g?blogID=2103813045682283353#overview/src=dashboard\">first blog attempt</a>. Unfortunately I can't show the other two because they're down so you'll have to just take my word for it. Utter failure. </p>\n\n<p>But this time it's different. I vow to keep up with this blog. Everyone else can do it, so damnit I can too.</p>\n\n<hr />\n\n<h3 id=\"aboutbobsblog\">About Bobs Blog</h3>\n\n<p>As the blog caption insinuates, what I write will be heavily geared towards programming. Challenges I'm having, interesting solutions to problems, and other code-y (pronounced CO-DEE) stuff will be the focus, <strong>I think</strong>. No promises. No promises for writing quality and no promises for content, those are the disclaimers for this blog. Realistically, some posts will probably be about Python while some will be about my efforts trying to launch my venture, <a href=\"http://www.back-step.com\">BackStep</a>, while others will be about the upcoming World Cup (CAN'T WAIT!). If you're <strong>really</strong> lucky, I'll write about some of the problems highlighted in the book I've been reading, <a href=\"http://mitpress.mit.edu/books/outer-limits-reason\">The Outer Limits Of Reason</a> by Noson S. Yanofsky. Real mind-fuck.</p>\n\n<hr />\n\n<p>In conclusion, read my blog. Please. Please read my blog and tell me how great it is. And so I make my exit, leaving you with this quote from a wise man.</p>\n\n<blockquote>\n  <p><em>RAMMMMPAAAAAAAAAGE</em> <br />\n  - Sterling Archer</p>\n</blockquote>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2014-03-08T07:36:51.000Z","created_by":1,"updated_at":"2014-03-08T21:41:36.000Z","updated_by":1,"published_at":"2014-03-08T07:36:51.000Z","published_by":1,"visibility":"public","mobiledoc":null,"amp":null},{"id":2,"uuid":"d7d20223-3625-45a3-87d8-8540c7173038","title":"Growing a Backbone","slug":"growing-a-backbone","markdown":"[Backstep](http://www.back-step.com) has two sides to it. One, which is the public facing side, is at the link given above. The other is an admin panel built with Node.js and Backbone at another (undisclosed) url. Now, when I first started building the panel I didn't know Backbone but I'd heard great things about it. In the end I decided to stick with what I knew (jQuery) and build out the panel that way. Quickly I was hit by the dreaded plague of spaghetti code. And so, over the past two days I've spent my time refactoring existing jQuery code into nice, structured Backbone and here is what I've learned from the experience. \n\n---\n\n####1. Don't let what you don't know scare you\nOf course this has exceptions. You don't know that the guy wearing a moth-balled duster and talking to himself in the dark alley is crazy, but obey instincts and don't go asking him about the weather. I don't want to get a call in two weeks that someone was shanked because they read my post and decided to \"take a risk\". Granted this makes the assumption that someone is reading my posts...but back to the subject at hand. If I had started by using Backbone, I would've saved myself two days of refactoring and countless hours of trying to get my existing code base to work, but I was too scared of the unknown to start my development using this tool. Finally, when I did decide to use Backbone, I made the mistake of trying to refactor my entire code base at once rather then incrementally. Which brings me to my next point.\n\n####2. Always iterate when trying new tech\nDon't make the mistake I did. You don't go from running 2 miles at 5.0 on the treadmill to 8.0 in a day. You shouldn't go from your crappy (but working) code to your shiny (but broken) code in a single step. Take it incrementally. First, convert one small portion of your application to the new tech, make sure it works, and then forge forward to the next segment of your application. Rinse and repeat. \n\n####3. Existing Backbone tutorials are not the best\nIncredibly surprising, yes, but also shockingly true. At least in my experience. This has definitely motivated me to write my next post on getting started with Backbone, as the existing tutorials all seem to be intent on going from 0-60. Let Bobby show you the way of the tortoise, my next post will lead us at a crawl through the basics of creating a Backbone.js application.\n\n---\n\nSo there you have it. I've told you what I've learned from converting the [Backstep](http://www.back-step.com) admin panel to Backbone. Now go forth young grasshopper. Stretch out your fingers and build something.\n","html":"<p><a href=\"http://www.back-step.com\">Backstep</a> has two sides to it. One, which is the public facing side, is at the link given above. The other is an admin panel built with Node.js and Backbone at another (undisclosed) url. Now, when I first started building the panel I didn't know Backbone but I'd heard great things about it. In the end I decided to stick with what I knew (jQuery) and build out the panel that way. Quickly I was hit by the dreaded plague of spaghetti code. And so, over the past two days I've spent my time refactoring existing jQuery code into nice, structured Backbone and here is what I've learned from the experience. </p>\n\n<hr />\n\n<h4 id=\"1dontletwhatyoudontknowscareyou\">1. Don't let what you don't know scare you</h4>\n\n<p>Of course this has exceptions. You don't know that the guy wearing a moth-balled duster and talking to himself in the dark alley is crazy, but obey instincts and don't go asking him about the weather. I don't want to get a call in two weeks that someone was shanked because they read my post and decided to \"take a risk\". Granted this makes the assumption that someone is reading my posts...but back to the subject at hand. If I had started by using Backbone, I would've saved myself two days of refactoring and countless hours of trying to get my existing code base to work, but I was too scared of the unknown to start my development using this tool. Finally, when I did decide to use Backbone, I made the mistake of trying to refactor my entire code base at once rather then incrementally. Which brings me to my next point.</p>\n\n<h4 id=\"2alwaysiteratewhentryingnewtech\">2. Always iterate when trying new tech</h4>\n\n<p>Don't make the mistake I did. You don't go from running 2 miles at 5.0 on the treadmill to 8.0 in a day. You shouldn't go from your crappy (but working) code to your shiny (but broken) code in a single step. Take it incrementally. First, convert one small portion of your application to the new tech, make sure it works, and then forge forward to the next segment of your application. Rinse and repeat. </p>\n\n<h4 id=\"3existingbackbonetutorialsarenotthebest\">3. Existing Backbone tutorials are not the best</h4>\n\n<p>Incredibly surprising, yes, but also shockingly true. At least in my experience. This has definitely motivated me to write my next post on getting started with Backbone, as the existing tutorials all seem to be intent on going from 0-60. Let Bobby show you the way of the tortoise, my next post will lead us at a crawl through the basics of creating a Backbone.js application.</p>\n\n<hr />\n\n<p>So there you have it. I've told you what I've learned from converting the <a href=\"http://www.back-step.com\">Backstep</a> admin panel to Backbone. Now go forth young grasshopper. Stretch out your fingers and build something.</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2014-03-10T20:52:56.000Z","created_by":1,"updated_at":"2014-03-10T20:57:50.000Z","updated_by":1,"published_at":"2014-03-10T20:54:18.000Z","published_by":null,"visibility":"public","mobiledoc":null,"amp":null},{"id":3,"uuid":"a1900a27-6ae6-41f7-b5a9-b9c7a8e64f1d","title":"Context Switching: A problem or a blessing?","slug":"context-switching-a-problem-or-a-blessing","markdown":"> *Carol* - A problem or a blessing???\n\n> *Conway* - ....A problem\n\n\nAh as always, Archer provides the perfect foil to real life. Today I'd like to talk about context switches. Context switching is the reason why I'm writing this post instead of writing a Backbone tutorial as I promised in my last post. In [Backstep](http://www.back-step.com), context switching has me juggling between three different languages, stacks, and sets of issues. Working simultaneously on a Backbone admin app, Django web app, and Android mobile app (with an iOS app soon to come), I feel like a cheater trying to keep his story straight with his various mistresses. It isn't easy. But is it so bad?\n\n---\n\nFirst, let's talk about the merits of context switching. For one, context switching can sometimes work wonders when you need to take a step back from a problem. Anyone who's faced down that one monster bug or monolothic feature request knows the feeling when they need to look at something else. Anything else, just so long as it gets them away from the nightmare-inducing monstrosity. In this case, context switching can be super beneficial as it allows one to remain both productive and serves the purpose of evacuation from the volatile section of code.\n\n\n<img src=\"http://i.imgur.com/wJiwJCm.gif\" alt=\"MRW\" style=\"display:block;margin:auto;\"/>\n<div style=\"text-align:center;font-style:italic;font-size:small;margin-top:-20px;\">MRW I look back at my shit code</div>\n\nContext switching can also be useful in the case that you easily get bored working on one thing (I'm a culprit of this). Switching context gives the illusion of working on multiple projects and thus may ease the feeling of stasis one sometimes feels when working for a long time on a single project.\n\n---\n\nNow, up to this point you might think I'm pro-context switching. I'm not. I've learned the hard way that context switching is detrimental and I'll tell you why.\n\n####1. It steers you away from thinking deeply about problems\nAs programmer's, we're taught that only about 20% of development time should be writing new code. The rest is occupied with writing tests, debugging, and planning. By switching context, one erroneously inflates that number. If you're always writing new code, it gives no time to reflect on the code you've already written, and no time to step back and think about the bigger picture. While at a cursory glance switching context might seem like it would provide the widest lens for examining your project, it in fact provides the narrowest. By switching attention away from planning and into coding, you are opting for the quick fix rather then for a long-term, sustainable solution.\n\n\n####2. Context switching gives you a false sense of progress\nWhen I learned about FDR's New Deal, I was taught that the primary reason it worked was not due to the content of the legislature. Rather, it worked because of the simple fact that people want to **feel** like they're moving forward. Like they're making progress. We can all relate to this feeling. Take the example of waiting in line at a grocery store. When the line is moving quickly, even if it's a long line, one feels a sense of hope. Now, take a shorter line but one that is moving at a crawl. Most people in that line look something like this:\n![MRW](http://i.imgur.com/nTij1IO.jpg)\nPeople in both lines reach the end at the same time, the only difference being that those in the longer line felt like they reached the end quicker.\n\nNow if programming was like waiting in a line and context switching was like being in the longer, faster line, it wouldn't matter if we context switched or not as we would complete the project in the same amount of time as our single-threaded counterparts. Fortunately, programming isn't like waiting in a line. It requires deliberation and thought. But herein lies the danger with context switching. When we switch context we **feel** like we're moving faster then when we focus on a single segment of code. In reality, however, this notion is misguided and leads to a false sense of progress. Much of this code will later be revealed as buggy, poorly planned, or both.\n\n---\n\nSo next time you think about switching context for the sake of switching context, remember:\n\n* Context switching is just a cheap out for thinking deeply about problems\n* By switching context, you might feel like you're moving faster, you're not.\n\n\n\n\n","html":"<blockquote>\n  <p><em>Carol</em> - A problem or a blessing???</p>\n  \n  <p><em>Conway</em> - ....A problem</p>\n</blockquote>\n\n<p>Ah as always, Archer provides the perfect foil to real life. Today I'd like to talk about context switches. Context switching is the reason why I'm writing this post instead of writing a Backbone tutorial as I promised in my last post. In <a href=\"http://www.back-step.com\">Backstep</a>, context switching has me juggling between three different languages, stacks, and sets of issues. Working simultaneously on a Backbone admin app, Django web app, and Android mobile app (with an iOS app soon to come), I feel like a cheater trying to keep his story straight with his various mistresses. It isn't easy. But is it so bad?</p>\n\n<hr />\n\n<p>First, let's talk about the merits of context switching. For one, context switching can sometimes work wonders when you need to take a step back from a problem. Anyone who's faced down that one monster bug or monolothic feature request knows the feeling when they need to look at something else. Anything else, just so long as it gets them away from the nightmare-inducing monstrosity. In this case, context switching can be super beneficial as it allows one to remain both productive and serves the purpose of evacuation from the volatile section of code.</p>\n\n<p><img src=\"http://i.imgur.com/wJiwJCm.gif\" alt=\"MRW\" style=\"display:block;margin:auto;\"/>  </p>\n\n<div style=\"text-align:center;font-style:italic;font-size:small;margin-top:-20px;\">MRW I look back at my shit code</div>\n\n<p>Context switching can also be useful in the case that you easily get bored working on one thing (I'm a culprit of this). Switching context gives the illusion of working on multiple projects and thus may ease the feeling of stasis one sometimes feels when working for a long time on a single project.</p>\n\n<hr />\n\n<p>Now, up to this point you might think I'm pro-context switching. I'm not. I've learned the hard way that context switching is detrimental and I'll tell you why.</p>\n\n<h4 id=\"1itsteersyouawayfromthinkingdeeplyaboutproblems\">1. It steers you away from thinking deeply about problems</h4>\n\n<p>As programmer's, we're taught that only about 20% of development time should be writing new code. The rest is occupied with writing tests, debugging, and planning. By switching context, one erroneously inflates that number. If you're always writing new code, it gives no time to reflect on the code you've already written, and no time to step back and think about the bigger picture. While at a cursory glance switching context might seem like it would provide the widest lens for examining your project, it in fact provides the narrowest. By switching attention away from planning and into coding, you are opting for the quick fix rather then for a long-term, sustainable solution.</p>\n\n<h4 id=\"2contextswitchinggivesyouafalsesenseofprogress\">2. Context switching gives you a false sense of progress</h4>\n\n<p>When I learned about FDR's New Deal, I was taught that the primary reason it worked was not due to the content of the legislature. Rather, it worked because of the simple fact that people want to <strong>feel</strong> like they're moving forward. Like they're making progress. We can all relate to this feeling. Take the example of waiting in line at a grocery store. When the line is moving quickly, even if it's a long line, one feels a sense of hope. Now, take a shorter line but one that is moving at a crawl. Most people in that line look something like this: <br />\n<img src=\"http://i.imgur.com/nTij1IO.jpg\" alt=\"MRW\" />\nPeople in both lines reach the end at the same time, the only difference being that those in the longer line felt like they reached the end quicker.</p>\n\n<p>Now if programming was like waiting in a line and context switching was like being in the longer, faster line, it wouldn't matter if we context switched or not as we would complete the project in the same amount of time as our single-threaded counterparts. Fortunately, programming isn't like waiting in a line. It requires deliberation and thought. But herein lies the danger with context switching. When we switch context we <strong>feel</strong> like we're moving faster then when we focus on a single segment of code. In reality, however, this notion is misguided and leads to a false sense of progress. Much of this code will later be revealed as buggy, poorly planned, or both.</p>\n\n<hr />\n\n<p>So next time you think about switching context for the sake of switching context, remember:</p>\n\n<ul>\n<li>Context switching is just a cheap out for thinking deeply about problems</li>\n<li>By switching context, you might feel like you're moving faster, you're not.</li>\n</ul>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2014-03-13T18:51:28.000Z","created_by":1,"updated_at":"2014-03-13T19:42:42.000Z","updated_by":1,"published_at":"2014-03-13T19:39:02.000Z","published_by":1,"visibility":"public","mobiledoc":null,"amp":null},{"id":4,"uuid":"1c93b738-656f-4001-a40c-ef7693ddda13","title":"Making a POST request in an Android app (and why I hate Java)","slug":"making-a-post-request-from-android-app","markdown":"As anyone who's read my past post on [context switching](http://blog.iambob.me/context-switching-a-problem-or-a-blessing/) knows, my most recent project - [Backstep](http://www.back-step.com) - is being built with a combination of technologies including Python/Django and Java/Android. Similar to my previous experiences with it, Python is a pleasure to use. It's super expressive, has a knowledgeable and friendly community, and a library exists for just about any domain one might encounter. But Java. Java is a different story. Similar to my past experiences with *that* language, usage feels akin to diving into the Mariana trench with one of these bad boys:\n![diving suit](http://m7.i.pbase.com/o4/34/123234/1/66986107.X24AZ9XF.IMG_080401.jpg)\n\nThe language feels archaic, clunky, and rather like a straitjacket, unecessarily inhibiting my creativity rather then enabling it. As in life, though, sometimes we are forced to do things (or use things) we would prefer to avoid. And so, in this post I'll lay out how to make a POST request with Java (Hint: it's nowhere near as straightforward as the ubiquitous ``requests`` library for Python)\n\n---\n\nFirst, let's examine a POST request using a brilliant request library.\n\n\timport requests\n    import json\n    \n    res = requests.post(\n    \t'http://some_url.com/api/',\n        json.dumps({'some_request_param': 'yay value'})\n    )\n        \nIts syntactically and semantically easy on the eyes (and fingers), yet flexible enough to work for nearly all use cases. Now onto its Frankenstein's monster equivalent in Java.\n\n---\n\nBefore laying out the Java equivalent POST request, I should mention that the library I decided to use for crafting the requests was the best that I found for my purposes, but might not be the best for everyone / for all use cases. So use at your own discretion. \n\nAll disclaimers aside, let's hook up the electrodes and bring our monster to life. First, we add the required dependencies to [Gradle](http://www.gradle.org/) (or [Maven](http://maven.apache.org/) if that's what you're into, [Android recommends Gradle](http://tools.android.com/tech-docs/new-build-system/user-guide), however). We're going to need both [Jackson](http://jackson.codehaus.org/) (or some other JSON object mapper) as well as a request library. For [Backstep](http://www.back-step.com), I went with the Java [http-request](https://github.com/kevinsawicki/http-request) library by Kevin Sawicki to fill this requirement. So at this point, our build.gradle file should have the following dependencies specified.\n\n\tdependencies {\n      compile 'com.github.kevinsawicki:http-request:5.6'\n      compile 'com.fasterxml.jackson.core:jackson-databind:2.3.0'\n      ...\n    }\n    \nNotice that I used the ``com.fasterxml.jackson`` library rather then the library located at the Jackson URL specified above. All you need to know is that this isn't necessary, just include Jackson in your dependencies.\n\nNext, we create a subclass of Android's ``AsyncTask`` for our POST request. Mine looks like this:\n![post class](/content/images/2014/Mar/Screen_Shot_2014_03_16_at_1_59_29_PM.png)\n\nA couple things to notice here.\n\n* ``mapper.writeValueAsString(this.instance)`` is the line that actually serializes an object to JSON.\n* My subclass is abstract. The reasoning behind this is that for any given POST request, I'm probably going to want a different callback for ``onPostExecute``. \n* The subclass is parameterized. This gives me the ability to craft a POST request for any serializable object.\n\nNow to raise the platform and apply the lightning for jump starting our monstrosity. We must define a class representing the entity we wish to POST. For this, Jackson has a template which you should follow and basically just requires specifying fields, getters, and setters. Here is one such entity in my system.\n![api entity](/content/images/2014/Mar/Screen_Shot_2014_03_16_at_2_09_49_PM.png)\n\nThe monster is beginning to show signs of life. His green skin is glowing faintly and his chest heaving up and down. Unfortunately, he's still very much useless. The next step in creating our request is building a concrete subclass of our ``PostApi``. This subclass's only requirement is to implement the abstract method defined in its parent, ``onPostExecute``. For our City example, it might look something like this:\n\t\n    private class CityPost extends PostApi<City> {\n    \tprotected CityPost(City c) {\n        \tsuper('endpoint_to_post_to', c);\n        }\n        \n        protected void onPostExecute(Map<String, ?> response) {\n        \t//do some stuff with the response\n        }\n    }\n\n\nIt's alive! It's alive!! We're ready to make our request! Thankfully this part is the easiest and simply requires instantiating and executing our ``CityPost``. The code to do so is simply\n\n\tnew CityPost(city_instance).execute();\n    \nAhh so, Java, let's talk. I know that enterprises use you. I know that you have a runtime environment that's deployable to nearly (if not every) platform. I know that you're modular, scalable, and bloated with features. But I don't like you. I don't like that it takes me more then triple the lines to perform the same tasks when compared to Python or Javascript. I don't like your stringent type system, causing me compile-time headaches I'd much rather address at run-time. And I don't like your disregard for coding beauty (using Python - again - as the golden standard). \n\n---\n\nWith the wise words of Sterling Archer as motivation, I leave you to go and try building your very own POST request in Java.\n\n> **Archer** - Cry havoc and let slip the hogs of war. <br />\n> **Lana** - Dogs <br />\n> **Archer** - Whatever farm animal of war, Lana! Shut up!\n ","html":"<p>As anyone who's read my past post on <a href=\"http://blog.iambob.me/context-switching-a-problem-or-a-blessing/\">context switching</a> knows, my most recent project - <a href=\"http://www.back-step.com\">Backstep</a> - is being built with a combination of technologies including Python/Django and Java/Android. Similar to my previous experiences with it, Python is a pleasure to use. It's super expressive, has a knowledgeable and friendly community, and a library exists for just about any domain one might encounter. But Java. Java is a different story. Similar to my past experiences with <em>that</em> language, usage feels akin to diving into the Mariana trench with one of these bad boys: <br />\n<img src=\"http://m7.i.pbase.com/o4/34/123234/1/66986107.X24AZ9XF.IMG_080401.jpg\" alt=\"diving suit\" /></p>\n\n<p>The language feels archaic, clunky, and rather like a straitjacket, unecessarily inhibiting my creativity rather then enabling it. As in life, though, sometimes we are forced to do things (or use things) we would prefer to avoid. And so, in this post I'll lay out how to make a POST request with Java (Hint: it's nowhere near as straightforward as the ubiquitous <code>requests</code> library for Python)</p>\n\n<hr />\n\n<p>First, let's examine a POST request using a brilliant request library.</p>\n\n<pre><code>import requests\nimport json\n\nres = requests.post(\n    'http://some_url.com/api/',\n    json.dumps({'some_request_param': 'yay value'})\n)\n</code></pre>\n\n<p>Its syntactically and semantically easy on the eyes (and fingers), yet flexible enough to work for nearly all use cases. Now onto its Frankenstein's monster equivalent in Java.</p>\n\n<hr />\n\n<p>Before laying out the Java equivalent POST request, I should mention that the library I decided to use for crafting the requests was the best that I found for my purposes, but might not be the best for everyone / for all use cases. So use at your own discretion. </p>\n\n<p>All disclaimers aside, let's hook up the electrodes and bring our monster to life. First, we add the required dependencies to <a href=\"http://www.gradle.org/\">Gradle</a> (or <a href=\"http://maven.apache.org/\">Maven</a> if that's what you're into, <a href=\"http://tools.android.com/tech-docs/new-build-system/user-guide\">Android recommends Gradle</a>, however). We're going to need both <a href=\"http://jackson.codehaus.org/\">Jackson</a> (or some other JSON object mapper) as well as a request library. For <a href=\"http://www.back-step.com\">Backstep</a>, I went with the Java <a href=\"https://github.com/kevinsawicki/http-request\">http-request</a> library by Kevin Sawicki to fill this requirement. So at this point, our build.gradle file should have the following dependencies specified.</p>\n\n<pre><code>dependencies {\n  compile 'com.github.kevinsawicki:http-request:5.6'\n  compile 'com.fasterxml.jackson.core:jackson-databind:2.3.0'\n  ...\n}\n</code></pre>\n\n<p>Notice that I used the <code>com.fasterxml.jackson</code> library rather then the library located at the Jackson URL specified above. All you need to know is that this isn't necessary, just include Jackson in your dependencies.</p>\n\n<p>Next, we create a subclass of Android's <code>AsyncTask</code> for our POST request. Mine looks like this: <br />\n<img src=\"/content/images/2014/Mar/Screen_Shot_2014_03_16_at_1_59_29_PM.png\" alt=\"post class\" /></p>\n\n<p>A couple things to notice here.</p>\n\n<ul>\n<li><code>mapper.writeValueAsString(this.instance)</code> is the line that actually serializes an object to JSON.</li>\n<li>My subclass is abstract. The reasoning behind this is that for any given POST request, I'm probably going to want a different callback for <code>onPostExecute</code>. </li>\n<li>The subclass is parameterized. This gives me the ability to craft a POST request for any serializable object.</li>\n</ul>\n\n<p>Now to raise the platform and apply the lightning for jump starting our monstrosity. We must define a class representing the entity we wish to POST. For this, Jackson has a template which you should follow and basically just requires specifying fields, getters, and setters. Here is one such entity in my system. <br />\n<img src=\"/content/images/2014/Mar/Screen_Shot_2014_03_16_at_2_09_49_PM.png\" alt=\"api entity\" /></p>\n\n<p>The monster is beginning to show signs of life. His green skin is glowing faintly and his chest heaving up and down. Unfortunately, he's still very much useless. The next step in creating our request is building a concrete subclass of our <code>PostApi</code>. This subclass's only requirement is to implement the abstract method defined in its parent, <code>onPostExecute</code>. For our City example, it might look something like this:</p>\n\n<pre><code>private class CityPost extends PostApi&lt;City&gt; {\n    protected CityPost(City c) {\n        super('endpoint_to_post_to', c);\n    }\n\n    protected void onPostExecute(Map&lt;String, ?&gt; response) {\n        //do some stuff with the response\n    }\n}\n</code></pre>\n\n<p>It's alive! It's alive!! We're ready to make our request! Thankfully this part is the easiest and simply requires instantiating and executing our <code>CityPost</code>. The code to do so is simply</p>\n\n<pre><code>new CityPost(city_instance).execute();\n</code></pre>\n\n<p>Ahh so, Java, let's talk. I know that enterprises use you. I know that you have a runtime environment that's deployable to nearly (if not every) platform. I know that you're modular, scalable, and bloated with features. But I don't like you. I don't like that it takes me more then triple the lines to perform the same tasks when compared to Python or Javascript. I don't like your stringent type system, causing me compile-time headaches I'd much rather address at run-time. And I don't like your disregard for coding beauty (using Python - again - as the golden standard). </p>\n\n<hr />\n\n<p>With the wise words of Sterling Archer as motivation, I leave you to go and try building your very own POST request in Java.</p>\n\n<blockquote>\n  <p><strong>Archer</strong> - Cry havoc and let slip the hogs of war. <br />\n  <strong>Lana</strong> - Dogs <br />\n  <strong>Archer</strong> - Whatever farm animal of war, Lana! Shut up!</p>\n</blockquote>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2014-03-16T20:30:43.000Z","created_by":1,"updated_at":"2014-03-16T21:50:32.000Z","updated_by":1,"published_at":"2014-03-16T21:43:22.000Z","published_by":1,"visibility":"public","mobiledoc":null,"amp":null},{"id":5,"uuid":"859581e1-a4b3-41b8-b9c9-fdcbd0d38f0f","title":"Backstep needs a co-founder","slug":"backstep-needs-a-co-founder","markdown":"I'm at a crossroads with [Backstep](http://www.back-step.com). From a technical standpoint, the product is nearly in a releasable state. However, from a business standpoint, we're far from ready. I need a co-founder, and I need one soon. Unfortunately, though, finding a co-founder is not as easy as I would have hoped. In many ways, finding the perfect co-founder is like finding the perfect training partner in Brazilian Jiu-Jitsu (yay metaphors, or similes, or whatever). Let me explain what I mean...because that comparison is far from obvious.\n\n---\n\nIn BJJ, rolling partners tend to fall into one of 4 categories.\n\n###1. Rambo \nThis is the guy that goes all out all the time. Rather then using skill, trying to apply the day's technique, or otherwise doing what you do in **training**, he opts for the brute-force, caveman approach instead.\n<div style=\"text-align:center;\">\n<img src=\"http://i244.photobucket.com/albums/gg28/grabagear1/rambo.jpg\" alt=\"rambo\" style=\"margin-bottom:0px; display:inline-block;\" /><br />\n<span style=\"font-size:small;\">rear naked choke: Rambo edition</span>\n</div>\nWe all know this guy's equivalent in the business world. Stubbornly stuck in his own ways and not willing to try something new or listen to another soul's input. I won't work with someone like this.\n\n\n###2. Dead Fish\nHint: It's exactly what you think. This dude will just flop to his back at the first sign of conflict, making no attempt to escape and meekly moving only to tap out. In general, rolling with this guy is the least productive of all partner types.\n\n<div style=\"text-align:center;\">\n<img src=\"http://coffeetableyears.files.wordpress.com/2012/03/dead-fish.jpg\" alt=\"rambo\" style=\"margin-bottom:0px; display:inline-block;\" /><br />\n<span style=\"font-size:small;\">I...I don't know what you expected</span>\n</div>\n\nMuch like his Jiu-Jitsu counterpart (and the dead fish pictured above), the business dead fish will contribute nothing, acting only as an occupier of space and blow horn of mediocre ideas. If you can't tell, I won't work with someone like this.\n\n\n###3. The Expert\nHis first training session was when - as a newborn - he submitted the umbilical cord as it tried to choke him out. While you'll learn a **ton** of stuff training with this guy, he'll - sorry buddy - learn very little training with you. In many ways, you are his dead fish opponent.\n\n<div style=\"text-align:center;\">\n<img src=\"http://i.imgur.com/vAQeSEC.jpg\" alt=\"rambo\" style=\"margin-bottom:0px; display:inline-block;\" /><br />\n<span style=\"font-size:small;\">Me right before rolling with \"the expert\"</span>\n</div>\n\nWhile working with a seasoned, brilliant co-founder sounds like a great idea on paper, I'm not sure it is. Call it an ego-problem (not to be confused with an *eggo* problem, now that would be a delicious conundrum), but ideally I'd like to work with someone at my level, both in experience and intelligence. Which brings me nicely to the last type of training partner.\n\n\n###4. Soulmate\nYou and him are like Beavis and Butthead. You're like Johny and June. You're like...some other equally alliterated and alluring couple. You're both the same weight, you have similar reasons for training BJJ, and - this really is the most important part - you have differing techniques. While you might be aggressive and try to take him down, he might be a defensive opponent and prefer to work from his back. You're each constantly challenging each other and - in doing so - making each other better. I need to find my business soulmate. Someone who has a background complimenting mine, is intelligent, friendly, and is willing to work as hard as I am to make the business succeed.\n\n---\n\nSo, think you're that person? If so, email me at steinbach.rj@gmail.com. If not, I just hope you're not a dead fish. Because nobody likes a dead fish.\n\n\n\n","html":"<p>I'm at a crossroads with <a href=\"http://www.back-step.com\">Backstep</a>. From a technical standpoint, the product is nearly in a releasable state. However, from a business standpoint, we're far from ready. I need a co-founder, and I need one soon. Unfortunately, though, finding a co-founder is not as easy as I would have hoped. In many ways, finding the perfect co-founder is like finding the perfect training partner in Brazilian Jiu-Jitsu (yay metaphors, or similes, or whatever). Let me explain what I mean...because that comparison is far from obvious.</p>\n\n<hr />\n\n<p>In BJJ, rolling partners tend to fall into one of 4 categories.</p>\n\n<h3 id=\"1rambo\">1. Rambo</h3>\n\n<p>This is the guy that goes all out all the time. Rather then using skill, trying to apply the day's technique, or otherwise doing what you do in <strong>training</strong>, he opts for the brute-force, caveman approach instead.  </p>\n\n<div style=\"text-align:center;\">  \n<img src=\"http://i244.photobucket.com/albums/gg28/grabagear1/rambo.jpg\" alt=\"rambo\" style=\"margin-bottom:0px; display:inline-block;\" /><br />  \n<span style=\"font-size:small;\">rear naked choke: Rambo edition</span>  \n</div>  \n\n<p>We all know this guy's equivalent in the business world. Stubbornly stuck in his own ways and not willing to try something new or listen to another soul's input. I won't work with someone like this.</p>\n\n<h3 id=\"2deadfish\">2. Dead Fish</h3>\n\n<p>Hint: It's exactly what you think. This dude will just flop to his back at the first sign of conflict, making no attempt to escape and meekly moving only to tap out. In general, rolling with this guy is the least productive of all partner types.</p>\n\n<div style=\"text-align:center;\">  \n<img src=\"http://coffeetableyears.files.wordpress.com/2012/03/dead-fish.jpg\" alt=\"rambo\" style=\"margin-bottom:0px; display:inline-block;\" /><br />  \n<span style=\"font-size:small;\">I...I don't know what you expected</span>  \n</div>\n\n<p>Much like his Jiu-Jitsu counterpart (and the dead fish pictured above), the business dead fish will contribute nothing, acting only as an occupier of space and blow horn of mediocre ideas. If you can't tell, I won't work with someone like this.</p>\n\n<h3 id=\"3theexpert\">3. The Expert</h3>\n\n<p>His first training session was when - as a newborn - he submitted the umbilical cord as it tried to choke him out. While you'll learn a <strong>ton</strong> of stuff training with this guy, he'll - sorry buddy - learn very little training with you. In many ways, you are his dead fish opponent.</p>\n\n<div style=\"text-align:center;\">  \n<img src=\"http://i.imgur.com/vAQeSEC.jpg\" alt=\"rambo\" style=\"margin-bottom:0px; display:inline-block;\" /><br />  \n<span style=\"font-size:small;\">Me right before rolling with \"the expert\"</span>  \n</div>\n\n<p>While working with a seasoned, brilliant co-founder sounds like a great idea on paper, I'm not sure it is. Call it an ego-problem (not to be confused with an <em>eggo</em> problem, now that would be a delicious conundrum), but ideally I'd like to work with someone at my level, both in experience and intelligence. Which brings me nicely to the last type of training partner.</p>\n\n<h3 id=\"4soulmate\">4. Soulmate</h3>\n\n<p>You and him are like Beavis and Butthead. You're like Johny and June. You're like...some other equally alliterated and alluring couple. You're both the same weight, you have similar reasons for training BJJ, and - this really is the most important part - you have differing techniques. While you might be aggressive and try to take him down, he might be a defensive opponent and prefer to work from his back. You're each constantly challenging each other and - in doing so - making each other better. I need to find my business soulmate. Someone who has a background complimenting mine, is intelligent, friendly, and is willing to work as hard as I am to make the business succeed.</p>\n\n<hr />\n\n<p>So, think you're that person? If so, email me at steinbach.rj@gmail.com. If not, I just hope you're not a dead fish. Because nobody likes a dead fish.</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2014-03-19T05:24:58.000Z","created_by":1,"updated_at":"2014-03-19T05:39:56.000Z","updated_by":1,"published_at":"2014-03-19T05:38:44.000Z","published_by":1,"visibility":"public","mobiledoc":null,"amp":null},{"id":6,"uuid":"ff5f6e84-adf7-4940-acc9-8b833c86679b","title":"Backstep and Time Management","slug":"backstep-and-time-management","markdown":"Time is precious. As [Backstep](http://www.back-step.com) gets ready to move into more of a business development phase, my time is as thin as ever. For instance, last week I had to build the iOS client from scratch, patch issues with the Android client, and fix some problems with the API. Yay codez. However, there might be a silver lining to having my time stretched thin.\n\n---\n\nA previous project of mine - openTapp - fell into oblivion after a year of coding. The product had undergone numerous iterations without a release and development had stagnated. I still believe the idea was a good one, but the lack of progress on the business side of the project had negatively effected the product. Severely. So, with Backstep I'm determined to avoid the pitfalls which swallowed openTapp. Now, I know what you might be thinking, what does this little anecdote have to do with the positives of having little time? Oh, you weren't thinking that? Then this should be how you feel:\n<img src=\"http://i.imgur.com/kdRp45c.jpg\" alt=\"retarded\" style=\"margin:auto; padding:5px; display:block;\" /> \n\nPoor writing: Check! Antagonizing readers: Check! I think this blog is on track to be a great success! But anyway, back to the point. I've found that when time feels as though it's in short supply, it forces me to prioritize. Rather then trying to make the product *perfect*, I get to the tasks which - although not as glamorous - are just as important. This week, I'll be trying to find a co-founder for Backstep, applying to incubators, and working out a business model. Yuck. It's even painful to write. But it's necessary, and time is short, so it will be done.\n\n---\n\nNow, let Papa Bobby give you some advice for time management learned from a lifetime of time wasting.\n\n* TV is the enemy. My parents have always said this (albeit while watching episodes of Seinfeld). There is no greater waste of time.\n* Iterate, iterate, iterate. I know this seems like it might go against earlier advice I gave in my [Context Switching](http://blog.iambob.me/context-switching-a-problem-or-a-blessing/) post, but sometimes you should put down a project between iterations in order to focus on a different aspect of that product. Otherwise, your project might begin to resemble those guys that skip leg day: Unbalanced and weird.\n\n<div style=\"text-align:center;\">\n<img src=\"http://i892.photobucket.com/albums/ac122/agm84/legs.jpg\" alt=\"skipped leg day\" />\n<span style=\"font-size:smaller;\">lookin' at you big guy</span>\n</div>\n\n* Finally, give yourself concrete time frames. Rather then saying you'd like to have something done soon, pick out a small piece of the project and say that you need to have that piece done within the week. Then take another piece, rinse, and repeat. Divide and conquer.\n\n","html":"<p>Time is precious. As <a href=\"http://www.back-step.com\">Backstep</a> gets ready to move into more of a business development phase, my time is as thin as ever. For instance, last week I had to build the iOS client from scratch, patch issues with the Android client, and fix some problems with the API. Yay codez. However, there might be a silver lining to having my time stretched thin.</p>\n\n<hr />\n\n<p>A previous project of mine - openTapp - fell into oblivion after a year of coding. The product had undergone numerous iterations without a release and development had stagnated. I still believe the idea was a good one, but the lack of progress on the business side of the project had negatively effected the product. Severely. So, with Backstep I'm determined to avoid the pitfalls which swallowed openTapp. Now, I know what you might be thinking, what does this little anecdote have to do with the positives of having little time? Oh, you weren't thinking that? Then this should be how you feel: <br />\n<img src=\"http://i.imgur.com/kdRp45c.jpg\" alt=\"retarded\" style=\"margin:auto; padding:5px; display:block;\" /> </p>\n\n<p>Poor writing: Check! Antagonizing readers: Check! I think this blog is on track to be a great success! But anyway, back to the point. I've found that when time feels as though it's in short supply, it forces me to prioritize. Rather then trying to make the product <em>perfect</em>, I get to the tasks which - although not as glamorous - are just as important. This week, I'll be trying to find a co-founder for Backstep, applying to incubators, and working out a business model. Yuck. It's even painful to write. But it's necessary, and time is short, so it will be done.</p>\n\n<hr />\n\n<p>Now, let Papa Bobby give you some advice for time management learned from a lifetime of time wasting.</p>\n\n<ul>\n<li>TV is the enemy. My parents have always said this (albeit while watching episodes of Seinfeld). There is no greater waste of time.</li>\n<li>Iterate, iterate, iterate. I know this seems like it might go against earlier advice I gave in my <a href=\"http://blog.iambob.me/context-switching-a-problem-or-a-blessing/\">Context Switching</a> post, but sometimes you should put down a project between iterations in order to focus on a different aspect of that product. Otherwise, your project might begin to resemble those guys that skip leg day: Unbalanced and weird.</li>\n</ul>\n\n<div style=\"text-align:center;\">  \n<img src=\"http://i892.photobucket.com/albums/ac122/agm84/legs.jpg\" alt=\"skipped leg day\" />  \n<span style=\"font-size:smaller;\">lookin' at you big guy</span>  \n</div>\n\n<ul>\n<li>Finally, give yourself concrete time frames. Rather then saying you'd like to have something done soon, pick out a small piece of the project and say that you need to have that piece done within the week. Then take another piece, rinse, and repeat. Divide and conquer.</li>\n</ul>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2014-03-22T19:24:16.000Z","created_by":1,"updated_at":"2014-03-22T20:05:27.000Z","updated_by":1,"published_at":"2014-03-22T20:05:27.000Z","published_by":1,"visibility":"public","mobiledoc":null,"amp":null},{"id":7,"uuid":"bb643312-db4b-4c50-a738-a229d3b6d223","title":"Steal This Startup Idea","slug":"steal-this-startup-idea","markdown":"This week has been Hell. Necessary Hell, but Hell. Filling out application after application for incubator programs is inducing PTSD-esque flashbacks to the college acceptance process and I'm ready to get back to coding. Now, if you haven't already noticed, I'm not overly keen on this aspect of creating a startup and it's got me wondering. Feel free to steal this idea anyone, but be a pal and give me some equity if you do. What if there was a startup dedicated to getting startups accepted into incubators? Meta, I know! Let's examine this idea for a bit, shall we? What am I saying? It's not up to you. I'm writing and am thus you're brave, strong, and handsome guide, so we're examining it...damnit.\n\n----\n\nIn this post I'm going to pose some open ended questions that, if you'd like, you can email me your answers to (<a href=\"mailto:steinbach.rj@gmail.com\">steinbach.rj@gmail.com</a> for the uninitiated). Let's call our new service....**incubated** (original, eh?). Now say a startup, for instance [Backstep](http://www.back-step.com), lands on the site. The initial questions we must answer for the Backstep representative are: What is this place? What does this service do? Is this a scam, should I GTFO? So in essence, we must establish our credibility.\n\n**Q:** *What can we do to establish our credibility?*\n\n<div style=\"text-align:center;\">\n<img src=\"http://i.imgur.com/dqVTD.gif\" alt=\"weirded out\" style=\"display:block; margin:auto;\" />\n<span style=\"font-size:small;\">what we <i>don't</i> want the site visitor's reaction to be</span>\n</div>\n\nNow assume we've somehow convinced Backstep that our site is credible, that we can in fact help them get into <a href=\"http://ycombinator.com/\">Y Combinator</a>. The next thing we'll need from Backstep is information about their company in order to craft the incubator application. However, the trickiness in this part is getting that information without forcing the user to answer the same questions they would in an incubator application. Here are some examples of common questions asked in incubator applications:\n\n* What is the business model?  How will you make money?\n* Who are your competitors? Provide links.\n* What makes your company unique? What is your competitive advantage.\n* Describe your team, what is something impressive they've achieved or built in the past?\n* etc, etc, etc.\n\n**Q:** *How do we answer these questions without overwhelming the user?*\n\nFinally, let's assume that everything has worked out handily up to this point. Backstep trusts us and they've given us the info we need to fill out their incubator applications. Now for the most important question in any business.\n\n**Q:** *How do we make money? Do we take equity? Fixed Fee?*\n<div style=\"text-align:center;\">\n<img src=\"http://i.imgur.com/bh3dP.gif\" alt=\"weirded out\" style=\"display:block; margin:auto;\" />\n<span style=\"font-size:small;\">Us after our first sale</span>\n</div>\n\n\n---\n\nSo steal my idea. Seriously, do it. I want you to follow this 3 step process:\n\n1. Answer the questions posed above and send them to me at <a href=\"mailto:steinbach.rj@gmail.com\">steinbach.rj@gmail.com</a>\n2. Found **incubated**\n3. Profit.\n\n\n\n\n\n\n","html":"<p>This week has been Hell. Necessary Hell, but Hell. Filling out application after application for incubator programs is inducing PTSD-esque flashbacks to the college acceptance process and I'm ready to get back to coding. Now, if you haven't already noticed, I'm not overly keen on this aspect of creating a startup and it's got me wondering. Feel free to steal this idea anyone, but be a pal and give me some equity if you do. What if there was a startup dedicated to getting startups accepted into incubators? Meta, I know! Let's examine this idea for a bit, shall we? What am I saying? It's not up to you. I'm writing and am thus you're brave, strong, and handsome guide, so we're examining it...damnit.</p>\n\n<hr />\n\n<p>In this post I'm going to pose some open ended questions that, if you'd like, you can email me your answers to (<a href=\"mailto:steinbach.rj@gmail.com\">steinbach.rj@gmail.com</a> for the uninitiated). Let's call our new service....<strong>incubated</strong> (original, eh?). Now say a startup, for instance <a href=\"http://www.back-step.com\">Backstep</a>, lands on the site. The initial questions we must answer for the Backstep representative are: What is this place? What does this service do? Is this a scam, should I GTFO? So in essence, we must establish our credibility.</p>\n\n<p><strong>Q:</strong> <em>What can we do to establish our credibility?</em></p>\n\n<div style=\"text-align:center;\">  \n<img src=\"http://i.imgur.com/dqVTD.gif\" alt=\"weirded out\" style=\"display:block; margin:auto;\" />  \n<span style=\"font-size:small;\">what we <i>don't</i> want the site visitor's reaction to be</span>  \n</div>\n\n<p>Now assume we've somehow convinced Backstep that our site is credible, that we can in fact help them get into <a href=\"http://ycombinator.com/\">Y Combinator</a>. The next thing we'll need from Backstep is information about their company in order to craft the incubator application. However, the trickiness in this part is getting that information without forcing the user to answer the same questions they would in an incubator application. Here are some examples of common questions asked in incubator applications:</p>\n\n<ul>\n<li>What is the business model?  How will you make money?</li>\n<li>Who are your competitors? Provide links.</li>\n<li>What makes your company unique? What is your competitive advantage.</li>\n<li>Describe your team, what is something impressive they've achieved or built in the past?</li>\n<li>etc, etc, etc.</li>\n</ul>\n\n<p><strong>Q:</strong> <em>How do we answer these questions without overwhelming the user?</em></p>\n\n<p>Finally, let's assume that everything has worked out handily up to this point. Backstep trusts us and they've given us the info we need to fill out their incubator applications. Now for the most important question in any business.</p>\n\n<p><strong>Q:</strong> <em>How do we make money? Do we take equity? Fixed Fee?</em></p>\n\n<div style=\"text-align:center;\">  \n<img src=\"http://i.imgur.com/bh3dP.gif\" alt=\"weirded out\" style=\"display:block; margin:auto;\" />  \n<span style=\"font-size:small;\">Us after our first sale</span>  \n</div>\n\n<hr />\n\n<p>So steal my idea. Seriously, do it. I want you to follow this 3 step process:</p>\n\n<ol>\n<li>Answer the questions posed above and send them to me at <a href=\"mailto:steinbach.rj@gmail.com\">steinbach.rj@gmail.com</a>  </li>\n<li>Found <strong>incubated</strong>  </li>\n<li>Profit.</li>\n</ol>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2014-03-28T20:51:51.000Z","created_by":1,"updated_at":"2014-03-28T21:20:21.000Z","updated_by":1,"published_at":"2014-03-28T21:16:23.000Z","published_by":1,"visibility":"public","mobiledoc":null,"amp":null},{"id":8,"uuid":"860236e2-5c97-48e1-8c70-1ca4748a9ece","title":"The super stupid idiot's guide to getting started with Django, Pipeline, and S3","slug":"the-super-stupid-idiots-guide-to-getting-started-with-django-pipeline-and-s3","markdown":"When it comes to dev ops I'm an idiot. In fact, I'm a super stupid idiot. As I spent the majority of yesterday tinkering with the Django configuration for [Backstep](http://www.back-step.com), I came to the conclusions that:\n\na. Bobby need to be smarter-er when come to dev ops\nb. There is no super stupid idiot's guide to getting started with Django, django-pipeline, and S3.\n\nSo in the spirit of sounding like I'm better at dev ops than I am, I've decided to dedicate this post to getting the aforementioned stack set up.\n\n---\n###Pipeline\n\nOf course step 1 is having Django set up and configured. This guide assumes that you have - at the very least - a complete Django installation. Now we're going to go ahead and install [django-pipeline](http://django-pipeline.readthedocs.org/en/latest/). Pipeline is pretty great because it lets you specify your static files in ``settings.py`` and then just works. With only small additional configuration, you can set up Pipeline to compile your LESS files, compress your Javascript, and make you a sandwich! Who doesn't want a sandwich?! \n\nFood aside, after installing Pipeline, add ``pipeline`` to your ``INSTALLED_APPS`` and set it as a Storage Backend using the configuration variable ``STATICFILES_STORAGE = 'pipeline.storage.PipelineStorage'`` The only thing to watch out for is Pipeline's ``PIPELINE_DISABLE_WRAPPER`` config variable. By default, it's ``False`` which means any JS variables in the global scope will automatically be wrapped in an IFFE. The idea is noble, everyone knows that global variables = bad, but in practice sometimes design patterns rely on global variables. For instance, if using Backbone.js like me, it is common practice to define models in the global scope. Therefore it might be beneficial to set ``PIPELINE_DISABLE_WRAPPER = True``, your call. \n\n---\n###Static Files\n\nNow that Pipeline is set up, lets make sure that  static files are served correctly. To do so, set the following variables in ```settings.py```.\n```\nSTATIC_ROOT = 'staticfiles/'\nSTATIC_URL = '/static/'\nMEDIA_ROOT = 'uploads/'\nMEDIA_URL = \"/media/\"\n```\nYour static files will now be served from the directory ``staticfiles`` at the URL ``/static/``. Next, we're going to just make sure that ``urls.py`` knows how to serve the static files. Go ahead and add the following to your ``urlpatterns``\n```\nurlpatterns += patterns('',\n    (r'^static/(?P<path>.*)$', 'django.views.static.serve', {'document_root': settings.STATIC_ROOT}),\n```\n\nPhew! Now all my fellow stupid idiots, it's around this point that I would typically start getting lost in tutorials, so let me recap what we have so far. At this point, you should have django-pipeline installed and configured and your static files should be available at the URL ``/static/<file>``. If you want to go ahead and test this, place a file called, oh I don't know, how about *bobbys\\_great\\_tutorial* in the root of your ``staticfiles`` directory and try to access it at the URL ``/static/bobbys_great_tutorial``.\n\n---\n###AWS\n\n\nOk on to the fun part, setting up AWS. *Disclaimer: The way I did this may be sub-optimal, but I can vouch for the fact that it does get the job done.* First, you're gonna need an [AWS account](http://aws.amazon.com/) so go ahead and sign up for that. Next we're going to want to set up an IAM account so that we're not using keys associated with the primary billing account for API calls and the like. To do so, just expand the **Services** dropdown in the upper left corner and select **IAM**. Once inside the IAM portal, select the **Users** tab from the left sidebar and then click the **Create New Users** button. Follow the prompts to create a new IAM user. Now we're going to want to set up what S3 calls a bucket (basically just a top level container for your files). So expand the services dropdown again and this time select S3. Click the **Create Bucket** button and follow the prompts to create a new bucket. Finally, we're all set, right? Right?! No, unfortunately. Now we get to deal with permissions. By default, S3 blocks all access to bucket contents so we have to change the suffocating access control. \n\n\nTo do so, first click the **Properties** button in the top right corner. You should then be presented with a side panel containing - duh - properties for the bucket.\n![properties](/content/images/2014/Apr/Screen-Shot-2014-04-04-at-11-24-28-AM.png)\nNow go ahead and expand the **Permissions** tab. Click the **Edit bucket policy** button and open up the policy generator from the resulting popup.\n![policy generator](/content/images/2014/Apr/Screen-Shot-2014-04-04-at-11-29-36-AM.png)\nFrom the policy screen, we're going to choose the **IAM policy** from the policy dropdown and then choose the appropriate selections for the rest of the form (it should be pretty straightforward, even to us super stupid idiots). By the end, your form should look something like this\n![policy form](/content/images/2014/Apr/Screen-Shot-2014-04-04-at-11-35-31-AM.png)\nwhere ``<bucket-name>`` is the name of the bucket you created earlier. Now click the **Generate Policy** button and copy the resulting text, we'll use this in our bucket policy editor. Go back to your S3 screen and - in the still open bucket policy editor - paste the text. If you click Save now, you'll get an error about missing a \"Principal\" element. The principal basically just determines who is allowed access. So, for the purposes of brevity (you **should** change this in the future, as you don't want just anybody to have access to all actions in your bucket, refer to my bucket policy editor screenshot above for a better policy description) just grant access to all actions for all users by adding the following Principal to the Statement object:\n```\n\"Principal\": {\n\t\"AWS\": \"*\"\n},\n...\n```\n\n---\n###Adding S3 As A Storage Backend\n\nHang in there buddy, we're getting close. The next step is setting up S3 as a storage backend so Pipeline knows about it. To do so we'll need both the ``django-storages`` package as well as the ``boto`` library. After adding both to our ``requirements.txt`` and ``pip`` installing, add ``storages`` to your ``INSTALLED_APPS``.  ``INSTALLED_APPS`` should now include at least\n```\nINSTALLED_APPS = (\n    ...\n    'pipeline',\n    'storages',\n    ...\n)\n```\nNow it's just a matter of setting some configuration variables in ``settings.py``.\n```\nAWS_ACCESS_KEY_ID = '<AWS ACCESS KEY FOR IAM USER>'\nAWS_SECRET_ACCESS_KEY = '<AWS SECRET ACCESS KEY FOR IAM USER>'\nAWS_STORAGE_BUCKET_NAME = '<AWS BUCKET NAME>'\nDEFAULT_FILE_STORAGE = 'storages.backends.s3boto.S3BotoStorage'\nSTATICFILES_STORAGE = 'leftbehind.apps.matchmaker.utils.S3PipelineStorage'\n```\n\n\n---\n###Wrapping Up\n\nOh. My. God. Make it stop. I know that's what you're thinking my fellow stupid idiot, and we're almost there. The only thing left to do is have Django serve static files at the URL set by the S3 bucket you bravely created. To do so, simply set \n```\nSTATIC_URL = 'https://<bucket domain>/{aws_bucket}/'.format(aws_bucket=AWS_STORAGE_BUCKET_NAME)\n```\nOk! That's it! If you made it this far and didn't just do this after the first paragraph\n![walk away](http://i.imgur.com/0i5Us9s.jpg)\nmuch respect. As a dev ops super stupid idiot comrade, your dedication inspires me. Now get back out there and create something great with your shiny static files architecture in place.\n\n---\n####Notes\n* Make sure you add ``settings.py`` to the ``.gitignore`` file so as to keep it removed from source control. We don't want Joe Schmoe (Shmoe? Shmo?) having access to your personal AWS keys.\n\n","html":"<p>When it comes to dev ops I'm an idiot. In fact, I'm a super stupid idiot. As I spent the majority of yesterday tinkering with the Django configuration for <a href=\"http://www.back-step.com\">Backstep</a>, I came to the conclusions that:</p>\n\n<p>a. Bobby need to be smarter-er when come to dev ops <br />\nb. There is no super stupid idiot's guide to getting started with Django, django-pipeline, and S3.</p>\n\n<p>So in the spirit of sounding like I'm better at dev ops than I am, I've decided to dedicate this post to getting the aforementioned stack set up.</p>\n\n<hr />\n\n<h3 id=\"pipeline\">Pipeline</h3>\n\n<p>Of course step 1 is having Django set up and configured. This guide assumes that you have - at the very least - a complete Django installation. Now we're going to go ahead and install <a href=\"http://django-pipeline.readthedocs.org/en/latest/\">django-pipeline</a>. Pipeline is pretty great because it lets you specify your static files in <code>settings.py</code> and then just works. With only small additional configuration, you can set up Pipeline to compile your LESS files, compress your Javascript, and make you a sandwich! Who doesn't want a sandwich?! </p>\n\n<p>Food aside, after installing Pipeline, add <code>pipeline</code> to your <code>INSTALLED_APPS</code> and set it as a Storage Backend using the configuration variable <code>STATICFILES_STORAGE = 'pipeline.storage.PipelineStorage'</code> The only thing to watch out for is Pipeline's <code>PIPELINE_DISABLE_WRAPPER</code> config variable. By default, it's <code>False</code> which means any JS variables in the global scope will automatically be wrapped in an IFFE. The idea is noble, everyone knows that global variables = bad, but in practice sometimes design patterns rely on global variables. For instance, if using Backbone.js like me, it is common practice to define models in the global scope. Therefore it might be beneficial to set <code>PIPELINE_DISABLE_WRAPPER = True</code>, your call. </p>\n\n<hr />\n\n<h3 id=\"staticfiles\">Static Files</h3>\n\n<p>Now that Pipeline is set up, lets make sure that  static files are served correctly. To do so, set the following variables in <code>settings.py</code>.  </p>\n\n<pre><code>STATIC_ROOT = 'staticfiles/'  \nSTATIC_URL = '/static/'  \nMEDIA_ROOT = 'uploads/'  \nMEDIA_URL = \"/media/\"  \n</code></pre>\n\n<p>Your static files will now be served from the directory <code>staticfiles</code> at the URL <code>/static/</code>. Next, we're going to just make sure that <code>urls.py</code> knows how to serve the static files. Go ahead and add the following to your <code>urlpatterns</code>  </p>\n\n<pre><code>urlpatterns += patterns('',  \n    (r'^static/(?P&lt;path&gt;.*)$', 'django.views.static.serve', {'document_root': settings.STATIC_ROOT}),\n</code></pre>\n\n<p>Phew! Now all my fellow stupid idiots, it's around this point that I would typically start getting lost in tutorials, so let me recap what we have so far. At this point, you should have django-pipeline installed and configured and your static files should be available at the URL <code>/static/&lt;file&gt;</code>. If you want to go ahead and test this, place a file called, oh I don't know, how about <em>bobbys_great_tutorial</em> in the root of your <code>staticfiles</code> directory and try to access it at the URL <code>/static/bobbys_great_tutorial</code>.</p>\n\n<hr />\n\n<h3 id=\"aws\">AWS</h3>\n\n<p>Ok on to the fun part, setting up AWS. <em>Disclaimer: The way I did this may be sub-optimal, but I can vouch for the fact that it does get the job done.</em> First, you're gonna need an <a href=\"http://aws.amazon.com/\">AWS account</a> so go ahead and sign up for that. Next we're going to want to set up an IAM account so that we're not using keys associated with the primary billing account for API calls and the like. To do so, just expand the <strong>Services</strong> dropdown in the upper left corner and select <strong>IAM</strong>. Once inside the IAM portal, select the <strong>Users</strong> tab from the left sidebar and then click the <strong>Create New Users</strong> button. Follow the prompts to create a new IAM user. Now we're going to want to set up what S3 calls a bucket (basically just a top level container for your files). So expand the services dropdown again and this time select S3. Click the <strong>Create Bucket</strong> button and follow the prompts to create a new bucket. Finally, we're all set, right? Right?! No, unfortunately. Now we get to deal with permissions. By default, S3 blocks all access to bucket contents so we have to change the suffocating access control. </p>\n\n<p>To do so, first click the <strong>Properties</strong> button in the top right corner. You should then be presented with a side panel containing - duh - properties for the bucket. <br />\n<img src=\"/content/images/2014/Apr/Screen-Shot-2014-04-04-at-11-24-28-AM.png\" alt=\"properties\" />\nNow go ahead and expand the <strong>Permissions</strong> tab. Click the <strong>Edit bucket policy</strong> button and open up the policy generator from the resulting popup. <br />\n<img src=\"/content/images/2014/Apr/Screen-Shot-2014-04-04-at-11-29-36-AM.png\" alt=\"policy generator\" />\nFrom the policy screen, we're going to choose the <strong>IAM policy</strong> from the policy dropdown and then choose the appropriate selections for the rest of the form (it should be pretty straightforward, even to us super stupid idiots). By the end, your form should look something like this <br />\n<img src=\"/content/images/2014/Apr/Screen-Shot-2014-04-04-at-11-35-31-AM.png\" alt=\"policy form\" />\nwhere <code>&lt;bucket-name&gt;</code> is the name of the bucket you created earlier. Now click the <strong>Generate Policy</strong> button and copy the resulting text, we'll use this in our bucket policy editor. Go back to your S3 screen and - in the still open bucket policy editor - paste the text. If you click Save now, you'll get an error about missing a \"Principal\" element. The principal basically just determines who is allowed access. So, for the purposes of brevity (you <strong>should</strong> change this in the future, as you don't want just anybody to have access to all actions in your bucket, refer to my bucket policy editor screenshot above for a better policy description) just grant access to all actions for all users by adding the following Principal to the Statement object:  </p>\n\n<pre><code>\"Principal\": {\n    \"AWS\": \"*\"\n},\n...\n</code></pre>\n\n<hr />\n\n<h3 id=\"addings3asastoragebackend\">Adding S3 As A Storage Backend</h3>\n\n<p>Hang in there buddy, we're getting close. The next step is setting up S3 as a storage backend so Pipeline knows about it. To do so we'll need both the <code>django-storages</code> package as well as the <code>boto</code> library. After adding both to our <code>requirements.txt</code> and <code>pip</code> installing, add <code>storages</code> to your <code>INSTALLED_APPS</code>.  <code>INSTALLED_APPS</code> should now include at least  </p>\n\n<pre><code>INSTALLED_APPS = (  \n    ...\n    'pipeline',\n    'storages',\n    ...\n)\n</code></pre>\n\n<p>Now it's just a matter of setting some configuration variables in <code>settings.py</code>.  </p>\n\n<pre><code>AWS_ACCESS_KEY_ID = '&lt;AWS ACCESS KEY FOR IAM USER&gt;'  \nAWS_SECRET_ACCESS_KEY = '&lt;AWS SECRET ACCESS KEY FOR IAM USER&gt;'  \nAWS_STORAGE_BUCKET_NAME = '&lt;AWS BUCKET NAME&gt;'  \nDEFAULT_FILE_STORAGE = 'storages.backends.s3boto.S3BotoStorage'  \nSTATICFILES_STORAGE = 'leftbehind.apps.matchmaker.utils.S3PipelineStorage'  \n</code></pre>\n\n<hr />\n\n<h3 id=\"wrappingup\">Wrapping Up</h3>\n\n<p>Oh. My. God. Make it stop. I know that's what you're thinking my fellow stupid idiot, and we're almost there. The only thing left to do is have Django serve static files at the URL set by the S3 bucket you bravely created. To do so, simply set  </p>\n\n<pre><code>STATIC_URL = 'https://&lt;bucket domain&gt;/{aws_bucket}/'.format(aws_bucket=AWS_STORAGE_BUCKET_NAME)  \n</code></pre>\n\n<p>Ok! That's it! If you made it this far and didn't just do this after the first paragraph <br />\n<img src=\"http://i.imgur.com/0i5Us9s.jpg\" alt=\"walk away\" />\nmuch respect. As a dev ops super stupid idiot comrade, your dedication inspires me. Now get back out there and create something great with your shiny static files architecture in place.</p>\n\n<hr />\n\n<h4 id=\"notes\">Notes</h4>\n\n<ul>\n<li>Make sure you add <code>settings.py</code> to the <code>.gitignore</code> file so as to keep it removed from source control. We don't want Joe Schmoe (Shmoe? Shmo?) having access to your personal AWS keys.</li>\n</ul>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2014-04-04T16:51:34.000Z","created_by":1,"updated_at":"2014-04-05T04:41:51.000Z","updated_by":1,"published_at":"2014-04-04T18:19:33.000Z","published_by":1,"visibility":"public","mobiledoc":null,"amp":null},{"id":9,"uuid":"673ff73a-1695-4914-9cee-9a89e8aa0e83","title":"My Scrubs Obsession","slug":"my-scrubs-obsession","markdown":"![eagle](http://img.pandawhale.com/post-28188-Scrubs-Eagle-gif-JD-riding-Tur-Y1Nk.gif)\n\nMedical shows often fall into one of two camps (not counting soap operas, but seriously who counts soap operas?). They tend to either focus heavily on the mystery of disease and the solving of a difficult case - House for instance - or they're simply situational dramas - Grey's Anatomy, ugh. In this sense, Scrubs is completely unique. It jumps from sitcom to drama to mystery, sometimes hitting all bases in the course of a single episode. And this versatility is what makes it so powerful. Now let me be the Dr. Cox to your J.D and tell you why, Dorothy.\n\n---\n\n###1. It doesn't get old\n\nAs much as I love House, the show doesn't age like a fine wine but rather like rancid meat for me. While I judge people who disapprove of shows due to them being formulaic, House was too formulaic even for my tastes. The show starts, victim goes down, theme song, panorama of hospital, House walks into room, blah blah blah snarky comments, doesn't want the case, wants the case, argues with Cuddy, does what he wants, saves the day, still unhappy. There, now you don't have to watch the show. Thank me later. \n\nOk fine, I oversimplified a bit. But the problem can also be found in other medical shows including the Show Which Must Not Be Named as I'll be referring to Grey's Anatomy going forward, SWMNBNA for short. Hm that's a terrible acronym, how about SWIM'N BeNama? Nope, we're going back to Grey's. As much as it pains me to say this, however, the problem isn't with Grey's, or with House. Rather, the problem is with trying to stretch a one-dimensional show over 40 minutes of time.\n\nScrubs on the other hand clocks in with an episode length of only 20 minutes. I like to picture the comparison of Scrubs and a show like House to spreading peanut butter on a piece of bread where said bread is the underlying formula of a show, the size of the bread represents episode length, peanut butter represents the show content, and the bread is sourdough which represents my insatiable love for sourdough bread. We start with the same amount of peanut butter for both shows. As the bread (time) gets larger, the peanut butter (or content) starts to wear thin. In Scrubs' case, the bread (time) is small enough that we never really get a glimpse of the underlying grain and can dig in to a gooey, satisfying peanut butter sandwich. House on the other hand just doesn't have enough peanut butter to cover the whole piece of bread with an adequate layer and we see the underlying bread (formula) poking through. To formalize this statement:\n```\nSandwich Quality = (PB Amount / Bread Size) + Sourdough\n```\nThe Tl;Dr of the above is simply that of course Scrubs follows a formula, it's just less obtuse than other shows and is spread over a smaller slice of bread, thereby making for a delicious PB sandwich.\n\n---\n\n###2. The cast\n\nZach Braff and Donald Faison are best friends in real life and they act exactly like J.D and Turk. Need I say more? If you don't believe me just check out [this Reddit AMA](http://www.reddit.com/r/IAmA/comments/1vzh42/donald_faison_ama_all_welcome/). Some highlights from the aforementioned link:\n\n> **Zach**: Braff here. Is it true that your penis is so large that several times it has been mistaken as an eel?\n>> **Donald**: yes this is true.\n\n> **Zach**: What do you like more; Weed or Oxygen?\n>> **Donald**: i need both to live.\n\n> **Zach**: Have you ever drag-raced a Lambo on pills in Miami?\n>> **Donald**: No. dude come on.\n\nSeriously, check out that link. Hilarious. \n\n---\n\n###3. Perry Ulysses Cox\n\nNo elaboration needed.\n![cox](http://media.giphy.com/media/RZEn93rYHRfVK/giphy.gif)\n\n---\n\n###4. Incredible Writing\n\nIt's a hackneyed description, but hell it fits too perfectly not to be said so YOLO. More than any show I've ever seen, Scrubs will leave you vacillating between laughter and tears. Go and watch or re-watch [My Last Words](http://scrubs.wikia.com/wiki/My_Last_Words) or [My Screw Up](http://scrubs.wikia.com/wiki/My_Screw_Up) or the series finale, [My Finale](http://scrubs.wikia.com/wiki/My_Finale) (no, we don't count the disgrace that was Season 9). The incredible thing about these episodes is how quickly the tone can shift without seeming forced. Dr. Cox goes from hilariously sarcastic to genuine or J.D from aloof to empathetic in just a few seconds, yet it still feels natural. No other show has been able to create these transitions as transparently and smoothly before or since.\n\n---\n\nNow all that's left is to make this weekend a Scrubs weekend. Get a PB sandwich, plop in front of the TV, switch on Netflix, and watch the greatest medical show ever created.\n\n","html":"<p><img src=\"http://img.pandawhale.com/post-28188-Scrubs-Eagle-gif-JD-riding-Tur-Y1Nk.gif\" alt=\"eagle\" /></p>\n\n<p>Medical shows often fall into one of two camps (not counting soap operas, but seriously who counts soap operas?). They tend to either focus heavily on the mystery of disease and the solving of a difficult case - House for instance - or they're simply situational dramas - Grey's Anatomy, ugh. In this sense, Scrubs is completely unique. It jumps from sitcom to drama to mystery, sometimes hitting all bases in the course of a single episode. And this versatility is what makes it so powerful. Now let me be the Dr. Cox to your J.D and tell you why, Dorothy.</p>\n\n<hr />\n\n<h3 id=\"1itdoesntgetold\">1. It doesn't get old</h3>\n\n<p>As much as I love House, the show doesn't age like a fine wine but rather like rancid meat for me. While I judge people who disapprove of shows due to them being formulaic, House was too formulaic even for my tastes. The show starts, victim goes down, theme song, panorama of hospital, House walks into room, blah blah blah snarky comments, doesn't want the case, wants the case, argues with Cuddy, does what he wants, saves the day, still unhappy. There, now you don't have to watch the show. Thank me later. </p>\n\n<p>Ok fine, I oversimplified a bit. But the problem can also be found in other medical shows including the Show Which Must Not Be Named as I'll be referring to Grey's Anatomy going forward, SWMNBNA for short. Hm that's a terrible acronym, how about SWIM'N BeNama? Nope, we're going back to Grey's. As much as it pains me to say this, however, the problem isn't with Grey's, or with House. Rather, the problem is with trying to stretch a one-dimensional show over 40 minutes of time.</p>\n\n<p>Scrubs on the other hand clocks in with an episode length of only 20 minutes. I like to picture the comparison of Scrubs and a show like House to spreading peanut butter on a piece of bread where said bread is the underlying formula of a show, the size of the bread represents episode length, peanut butter represents the show content, and the bread is sourdough which represents my insatiable love for sourdough bread. We start with the same amount of peanut butter for both shows. As the bread (time) gets larger, the peanut butter (or content) starts to wear thin. In Scrubs' case, the bread (time) is small enough that we never really get a glimpse of the underlying grain and can dig in to a gooey, satisfying peanut butter sandwich. House on the other hand just doesn't have enough peanut butter to cover the whole piece of bread with an adequate layer and we see the underlying bread (formula) poking through. To formalize this statement:  </p>\n\n<pre><code>Sandwich Quality = (PB Amount / Bread Size) + Sourdough  \n</code></pre>\n\n<p>The Tl;Dr of the above is simply that of course Scrubs follows a formula, it's just less obtuse than other shows and is spread over a smaller slice of bread, thereby making for a delicious PB sandwich.</p>\n\n<hr />\n\n<h3 id=\"2thecast\">2. The cast</h3>\n\n<p>Zach Braff and Donald Faison are best friends in real life and they act exactly like J.D and Turk. Need I say more? If you don't believe me just check out <a href=\"http://www.reddit.com/r/IAmA/comments/1vzh42/donald_faison_ama_all_welcome/\">this Reddit AMA</a>. Some highlights from the aforementioned link:</p>\n\n<blockquote>\n  <p><strong>Zach</strong>: Braff here. Is it true that your penis is so large that several times it has been mistaken as an eel?</p>\n  \n  <blockquote>\n    <p><strong>Donald</strong>: yes this is true.</p>\n  </blockquote>\n  \n  <p><strong>Zach</strong>: What do you like more; Weed or Oxygen?</p>\n  \n  <blockquote>\n    <p><strong>Donald</strong>: i need both to live.</p>\n  </blockquote>\n  \n  <p><strong>Zach</strong>: Have you ever drag-raced a Lambo on pills in Miami?</p>\n  \n  <blockquote>\n    <p><strong>Donald</strong>: No. dude come on.</p>\n  </blockquote>\n</blockquote>\n\n<p>Seriously, check out that link. Hilarious. </p>\n\n<hr />\n\n<h3 id=\"3perryulyssescox\">3. Perry Ulysses Cox</h3>\n\n<p>No elaboration needed. <br />\n<img src=\"http://media.giphy.com/media/RZEn93rYHRfVK/giphy.gif\" alt=\"cox\" /></p>\n\n<hr />\n\n<h3 id=\"4incrediblewriting\">4. Incredible Writing</h3>\n\n<p>It's a hackneyed description, but hell it fits too perfectly not to be said so YOLO. More than any show I've ever seen, Scrubs will leave you vacillating between laughter and tears. Go and watch or re-watch <a href=\"http://scrubs.wikia.com/wiki/My_Last_Words\">My Last Words</a> or <a href=\"http://scrubs.wikia.com/wiki/My_Screw_Up\">My Screw Up</a> or the series finale, <a href=\"http://scrubs.wikia.com/wiki/My_Finale\">My Finale</a> (no, we don't count the disgrace that was Season 9). The incredible thing about these episodes is how quickly the tone can shift without seeming forced. Dr. Cox goes from hilariously sarcastic to genuine or J.D from aloof to empathetic in just a few seconds, yet it still feels natural. No other show has been able to create these transitions as transparently and smoothly before or since.</p>\n\n<hr />\n\n<p>Now all that's left is to make this weekend a Scrubs weekend. Get a PB sandwich, plop in front of the TV, switch on Netflix, and watch the greatest medical show ever created.</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2014-04-12T06:48:29.000Z","created_by":1,"updated_at":"2014-04-12T19:41:37.000Z","updated_by":1,"published_at":"2014-04-12T19:39:44.000Z","published_by":1,"visibility":"public","mobiledoc":null,"amp":null},{"id":10,"uuid":"a8d28b37-1de5-4796-92b6-409820d02750","title":"Folk to EDM: The top 10 artists to code to","slug":"folk-to-edm-the-top-10-artists-to-code-to","markdown":"Coding without a soundtrack sucks. It's one of those things that - like working out and movie montages - requires a powerful score. While hacking away on [BackStep](http://www.back-step.com) it's my life-blood, second only to coffee in importance. Now, without further ado, let me present my favorite artists to nerd out to.\n\n##1. Daft Punk\nThe quintessential (and in all likelihood most widely quoted) artist to code to, Daft Punk is perfect for those marathon coding sessions when the ideal background is something melodic, repetitive, and driving. \n\n####Favorite album: [Discovery](http://www.rdio.com/artist/Daft_Punk/album/Discovery/)\n\n\n##2. Hans Zimmer\nWanna feel like a badass while coding? As oxymoronic as that might sound, it is in fact possible while listening to the epic scores of Hans Zimmer. His suspenseful songs are ideal for midnight before a release, halfway through a problem, and time slowly ticking down. \n####Favorite album: [Batman: The Dark Knight OST](http://www.rdio.com/artist/Hans_Zimmer/album/The_Dark_Knight_Rises_Original_Motion_Picture_Soundtrack/)\n\n\n##3. Weezer\nOk, I admit, as a 90's baby I'm biased. But seriously, how can you argue with the band that created both [Island in the Sun](http://www.rdio.com/artist/Weezer/album/Weezer_\\(Green_Album\\)/track/Island_In_The_Sun/) and [Buddy Holly](http://www.rdio.com/artist/Weezer/album/Weezer/track/Buddy_Holly/)? Weezer is suited for when you're debugging that particularly awful segment of code or writing up an especially annoying suite of tests and will have you singing along between muttered obscenities.\n\n####Favorite album: Tie between [Blue](http://www.rdio.com/artist/Weezer/album/Weezer/) and [Green](http://www.rdio.com/artist/Weezer/album/Weezer_\\(Green_Album\\)/)\n\n\n##4. Joe Purdy\nProbably the most obscure choice in this list, Joe Purdy is a great example of American Folk. While not ideal for a late night coding session, Purdy is perfect for working out the morning jitters after that third cup of coffee.\n\n####Favorite album: [Only Four Seasons](http://www.rdio.com/artist/Joe_Purdy/album/Only_Four_Seasons/)\n\n\n##5. Chance The Rapper\nWith obvious Jazz and R&B influences, hip-hop artist Chance The Rapper has a refreshingly unique sound. Throw on some Chance as you segway between code segments and re-organize thought processes for the new code block.\n\n####Favorite album [Acid Rain](http://www.rdio.com/people/leashxah/playlists/8595047/Chance_the_Rapper/)\n\n\n##6. Billie Holiday\nHaving perhaps the greatest voice of the modern era, Billie Holiday holds a special place in this list. Although her music is often dreamy and more likely to put you to sleep than to energize those code muscles, I've found her to be perfect for times when sitting back in your chair, closing drooping eyelids, and just thinking about a problem is in order.\n\n####Favorite songs: [Crazy He Calls Me](http://www.rdio.com/artist/Billie_Holiday/album/Billie_Holiday%27s_Greatest_Hits/track/Crazy_He_Calls_Me/), [Stormy Weather](http://www.rdio.com/artist/Billie_Holiday/album/The_Complete_Billie_Holiday_On_Verve_1945_-_1959/track/Stormy_Weather/), [Gloomy Sunday](http://www.rdio.com/artist/Billie_Holiday/album/The_Essential_Billie_Holiday_2/track/Gloomy_Sunday/) \n\n\n##7. John Williams\nCoding to the music of Star Wars. It's nerd heaven. Enough said.\n\n####Favorite album: [Star Wars Episode V](http://www.rdio.com/artist/John_Williams_1/album/Star_Wars_Episode_V_The_Empire_Strikes_Back_(Original_Motion_Picture_Soundtrack)/)\n\n\n##8. Girl Talk\nForming order from chaos is something that we as programmers must constantly focus on. Mixing disparate tracks, oftentimes across genres, means that Girl Talk's success, too, lies in this ability. Perhaps it is for this reason that Girl Talk is the perfect accompaniment to a heavy refactoring session where converting chaotic and jumbled code into something beautiful is the end goal. \n\n####Favorite album: [Feed the Animals](http://www.rdio.com/artist/Girl_Talk/album/Feed_the_Animals/)\n\n\n##9. Calvin Harris\nCalvin Harris, like Daft Punk, is perfect for marathon coding sessions when the most important thing is a repetitive and driving track sending your fingers flittering over the keys. \n\n####Favorite songs: [Sweet Nothing](http://www.rdio.com/artist/Calvin_Harris/album/18_Months/track/Sweet_Nothing_(feat._Florence_Welch)/), [Feel So Close](http://www.rdio.com/artist/Calvin_Harris/album/18_Months/track/Feel_So_Close/), [I Need Your Love](http://www.rdio.com/artist/Calvin_Harris/album/18_Months/track/I_Need_Your_Love_(feat._Ellie_Goulding)/)\n\n\n##10. Mozart\nThere's something surreal about performing the ultra-modern act of coding while listening to an 18th century soundtrack. Perhaps it's this contrast that boosts code production or maybe it's simply the relative peacefullness of classical music to modern music, but I've found Mozart to be the perfect mid-afternoon musical background.\n\n####Favorite album: [Requiem](http://www.rdio.com/artist/William_Fred_Scott/album/Mozart_Requiem/)\n\n---\n\nSo there they are, my top 10 artists to code to. Think I m missing someone? Let me know in the comments below as I'm always looking to grow my coding music inventory.","html":"<p>Coding without a soundtrack sucks. It's one of those things that - like working out and movie montages - requires a powerful score. While hacking away on <a href=\"http://www.back-step.com\">BackStep</a> it's my life-blood, second only to coffee in importance. Now, without further ado, let me present my favorite artists to nerd out to.</p>\n\n<h2 id=\"1daftpunk\">1. Daft Punk</h2>\n\n<p>The quintessential (and in all likelihood most widely quoted) artist to code to, Daft Punk is perfect for those marathon coding sessions when the ideal background is something melodic, repetitive, and driving. </p>\n\n<h4 id=\"favoritealbumdiscoveryhttpwwwrdiocomartistdaft_punkalbumdiscovery\">Favorite album: <a href=\"http://www.rdio.com/artist/Daft_Punk/album/Discovery/\">Discovery</a></h4>\n\n<h2 id=\"2hanszimmer\">2. Hans Zimmer</h2>\n\n<p>Wanna feel like a badass while coding? As oxymoronic as that might sound, it is in fact possible while listening to the epic scores of Hans Zimmer. His suspenseful songs are ideal for midnight before a release, halfway through a problem, and time slowly ticking down.  </p>\n\n<h4 id=\"favoritealbumbatmanthedarkknightosthttpwwwrdiocomartisthans_zimmeralbumthe_dark_knight_rises_original_motion_picture_soundtrack\">Favorite album: <a href=\"http://www.rdio.com/artist/Hans_Zimmer/album/The_Dark_Knight_Rises_Original_Motion_Picture_Soundtrack/\">Batman: The Dark Knight OST</a></h4>\n\n<h2 id=\"3weezer\">3. Weezer</h2>\n\n<p>Ok, I admit, as a 90's baby I'm biased. But seriously, how can you argue with the band that created both <a href=\"http://www.rdio.com/artist/Weezer/album/Weezer_(Green_Album)/track/Island_In_The_Sun/\">Island in the Sun</a> and <a href=\"http://www.rdio.com/artist/Weezer/album/Weezer/track/Buddy_Holly/\">Buddy Holly</a>? Weezer is suited for when you're debugging that particularly awful segment of code or writing up an especially annoying suite of tests and will have you singing along between muttered obscenities.</p>\n\n<h4 id=\"favoritealbumtiebetweenbluehttpwwwrdiocomartistweezeralbumweezerandgreenhttpwwwrdiocomartistweezeralbumweezer_green_album\">Favorite album: Tie between <a href=\"http://www.rdio.com/artist/Weezer/album/Weezer/\">Blue</a> and <a href=\"http://www.rdio.com/artist/Weezer/album/Weezer_(Green_Album)/\">Green</a></h4>\n\n<h2 id=\"4joepurdy\">4. Joe Purdy</h2>\n\n<p>Probably the most obscure choice in this list, Joe Purdy is a great example of American Folk. While not ideal for a late night coding session, Purdy is perfect for working out the morning jitters after that third cup of coffee.</p>\n\n<h4 id=\"favoritealbumonlyfourseasonshttpwwwrdiocomartistjoe_purdyalbumonly_four_seasons\">Favorite album: <a href=\"http://www.rdio.com/artist/Joe_Purdy/album/Only_Four_Seasons/\">Only Four Seasons</a></h4>\n\n<h2 id=\"5chancetherapper\">5. Chance The Rapper</h2>\n\n<p>With obvious Jazz and R&amp;B influences, hip-hop artist Chance The Rapper has a refreshingly unique sound. Throw on some Chance as you segway between code segments and re-organize thought processes for the new code block.</p>\n\n<h4 id=\"favoritealbumacidrainhttpwwwrdiocompeopleleashxahplaylists8595047chance_the_rapper\">Favorite album <a href=\"http://www.rdio.com/people/leashxah/playlists/8595047/Chance_the_Rapper/\">Acid Rain</a></h4>\n\n<h2 id=\"6billieholiday\">6. Billie Holiday</h2>\n\n<p>Having perhaps the greatest voice of the modern era, Billie Holiday holds a special place in this list. Although her music is often dreamy and more likely to put you to sleep than to energize those code muscles, I've found her to be perfect for times when sitting back in your chair, closing drooping eyelids, and just thinking about a problem is in order.</p>\n\n<h4 id=\"favoritesongscrazyhecallsmehttpwwwrdiocomartistbillie_holidayalbumbillie_holiday27s_greatest_hitstrackcrazy_he_calls_mestormyweatherhttpwwwrdiocomartistbillie_holidayalbumthe_complete_billie_holiday_on_verve_1945__1959trackstormy_weathergloomysundayhttpwwwrdiocomartistbillie_holidayalbumthe_essential_billie_holiday_2trackgloomy_sunday\">Favorite songs: <a href=\"http://www.rdio.com/artist/Billie_Holiday/album/Billie_Holiday%27s_Greatest_Hits/track/Crazy_He_Calls_Me/\">Crazy He Calls Me</a>, <a href=\"http://www.rdio.com/artist/Billie_Holiday/album/The_Complete_Billie_Holiday_On_Verve_1945_-_1959/track/Stormy_Weather/\">Stormy Weather</a>, <a href=\"http://www.rdio.com/artist/Billie_Holiday/album/The_Essential_Billie_Holiday_2/track/Gloomy_Sunday/\">Gloomy Sunday</a></h4>\n\n<h2 id=\"7johnwilliams\">7. John Williams</h2>\n\n<p>Coding to the music of Star Wars. It's nerd heaven. Enough said.</p>\n\n<h4 id=\"favoritealbumstarwarsepisodevhttpwwwrdiocomartistjohn_williams_1albumstar_wars_episode_v_the_empire_strikes_back_original_motion_picture_soundtrack\">Favorite album: <a href=\"http://www.rdio.com/artist/John_Williams_1/album/Star_Wars_Episode_V_The_Empire_Strikes_Back_(Original_Motion_Picture_Soundtrack)/\">Star Wars Episode V</a></h4>\n\n<h2 id=\"8girltalk\">8. Girl Talk</h2>\n\n<p>Forming order from chaos is something that we as programmers must constantly focus on. Mixing disparate tracks, oftentimes across genres, means that Girl Talk's success, too, lies in this ability. Perhaps it is for this reason that Girl Talk is the perfect accompaniment to a heavy refactoring session where converting chaotic and jumbled code into something beautiful is the end goal. </p>\n\n<h4 id=\"favoritealbumfeedtheanimalshttpwwwrdiocomartistgirl_talkalbumfeed_the_animals\">Favorite album: <a href=\"http://www.rdio.com/artist/Girl_Talk/album/Feed_the_Animals/\">Feed the Animals</a></h4>\n\n<h2 id=\"9calvinharris\">9. Calvin Harris</h2>\n\n<p>Calvin Harris, like Daft Punk, is perfect for marathon coding sessions when the most important thing is a repetitive and driving track sending your fingers flittering over the keys. </p>\n\n<h4 id=\"favoritesongssweetnothinghttpwwwrdiocomartistcalvin_harrisalbum18_monthstracksweet_nothing_feat_florence_welchfeelsoclosehttpwwwrdiocomartistcalvin_harrisalbum18_monthstrackfeel_so_closeineedyourlovehttpwwwrdiocomartistcalvin_harrisalbum18_monthstracki_need_your_love_feat_ellie_goulding\">Favorite songs: <a href=\"http://www.rdio.com/artist/Calvin_Harris/album/18_Months/track/Sweet_Nothing_(feat._Florence_Welch)/\">Sweet Nothing</a>, <a href=\"http://www.rdio.com/artist/Calvin_Harris/album/18_Months/track/Feel_So_Close/\">Feel So Close</a>, <a href=\"http://www.rdio.com/artist/Calvin_Harris/album/18_Months/track/I_Need_Your_Love_(feat._Ellie_Goulding)/\">I Need Your Love</a></h4>\n\n<h2 id=\"10mozart\">10. Mozart</h2>\n\n<p>There's something surreal about performing the ultra-modern act of coding while listening to an 18th century soundtrack. Perhaps it's this contrast that boosts code production or maybe it's simply the relative peacefullness of classical music to modern music, but I've found Mozart to be the perfect mid-afternoon musical background.</p>\n\n<h4 id=\"favoritealbumrequiemhttpwwwrdiocomartistwilliam_fred_scottalbummozart_requiem\">Favorite album: <a href=\"http://www.rdio.com/artist/William_Fred_Scott/album/Mozart_Requiem/\">Requiem</a></h4>\n\n<hr />\n\n<p>So there they are, my top 10 artists to code to. Think I m missing someone? Let me know in the comments below as I'm always looking to grow my coding music inventory.</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2014-04-20T22:41:54.000Z","created_by":1,"updated_at":"2014-04-21T18:08:56.000Z","updated_by":1,"published_at":"2014-04-21T18:08:56.000Z","published_by":1,"visibility":"public","mobiledoc":null,"amp":null},{"id":11,"uuid":"81d92be3-82ec-4ed1-a6e4-bdfd4b960353","title":"Death to the Technical Interview","slug":"death-to-the-technical-interview","markdown":"Coding is hard. Most would agree and - if not - then either you know something I don't (likely) or you don't know what you're doing (also, likely). With that said, coding while a potential future employer is scowling over your shoulder and murmuring inaudibly makes the process incalcuably harder. So, allow me to tell you why we all should join the chorus calling for the death of the modern technical interrogation.\n\n---\n\n###1. It's not a good indicator of technical ability.\n\nOk, if the position happens to be one for which disarming a nuclear bomb is a possibility, disregard this argument. Otherwise, in what possible high-pressure situation will you ever be expected to solve an obscure data structures problem on a whiteboard. With no syntax checking or debugger. In front of three scrutinizing neck-beards. Answer: Never. \n\nNow the logical followup question to this bold claim is: If the technical interview is a poor indicator of technical prowess, what's a good one? How do we separate the Michael Jordan's of programming from the...bad basketball player equivalent? To this, I say there are two alternate ways to accurately and easily gauge a programmers ability.\n\n* Github profile: How many repo's do they have? How active are they? Do they contribute to open source projects? And then, of course, the obvious code quality questions.\n* Programming project. Having an applicant complete a small task in their own time and in their own lair yield's both a better reading of ability and results in a much less stressful experience. This definitely does **NOT** mean a project on [collabedit](http://collabedit.com/) or an equivalent collaborative editor where someone is just virtually giving code the stink eye rather than in person. \n\n<div style='text-align:center;'><img src=\"http://i.imgur.com/yO4UhUn.gif\" alt=\"hank\" / style='display:block;'><span style='font-size:10px; font-style:italic;'>me walking out of every technical interview ever</span></div>\n\n---\n\n###2. It's unpleasant for all involved.\n\nSomewhat recently while working at [TheShelf](http://www.theshelf.com/) (awesome company that all fashion bloggers should want to be a part of), I had the opportunity to conduct my first technical interview. It started out innocuously enough with the usual pleasantries, but shit hit the fan real quick and real hard. The position was one which would require a fairly comprehensive knowledge of Javascript so I started the interview with - what I thought - was a fairly simple indicator of experience with closures (a programming paradigm). A few minutes in and after some bumbling about with the marker, still nothing was written on the white board. Five minutes later and I had written the first quarter of the answer on the board. Another ten minutes passed and now the atmosphere in the room was distinctly tense. Finally, after 15 minutes I had given her the entire answer and we cut off the interview there. I know it must have been terrible for her, but man it was pretty traumatic for me too. Bad technical interviews rank pretty damn high on the awkard scale.\n\n<div style='text-align:center;'><img src=\"http://4.bp.blogspot.com/-Mddk7CwwhbY/Um9uqiX-OZI/AAAAAAAAOh0/ew3DCcen_vU/s1600/Doc-Rivers.gif\" alt=\"hank\" / style='display:block;'><span style='font-size:10px; font-style:italic;'>my face watching the train wreck unfold</span></div>\n\n---\n\n###3. Questions are hard to craft? Questions *are* hard to craft.\n\nIt's far too easy to underthink technical interview questions. They must - in fact - be tailored to the individual being interviewed. That is to say it's irresponsible to ask a 10+ years of experience professional what the difference between a method and a function is while the same question is perfectly appropriate for a recent grad. This makes the process of creating a suite of interview questions exhausting, error prone, and just a huge time-suck. \n\n---\n\nNow us Python developers, Ruby developers, Java developers, PHP developers, and (God help you) Perl developers, let us put aside our meaningless and largely annoying quibbles to unite under a single banner. For once, let's say who cares whether Django or Rails is the superior framework and just join our voices to call for an end to the modern technical interview.\n<div style='text-align:center;'><img src=\"http://i.imgur.com/GF2CoJw.gif\" alt=\"hank\" / style='display:block;'><span style='font-size:10px; font-style:italic;'>to the technical interview, so say we all</span></div>\n","html":"<p>Coding is hard. Most would agree and - if not - then either you know something I don't (likely) or you don't know what you're doing (also, likely). With that said, coding while a potential future employer is scowling over your shoulder and murmuring inaudibly makes the process incalcuably harder. So, allow me to tell you why we all should join the chorus calling for the death of the modern technical interrogation.</p>\n\n<hr />\n\n<h3 id=\"1itsnotagoodindicatoroftechnicalability\">1. It's not a good indicator of technical ability.</h3>\n\n<p>Ok, if the position happens to be one for which disarming a nuclear bomb is a possibility, disregard this argument. Otherwise, in what possible high-pressure situation will you ever be expected to solve an obscure data structures problem on a whiteboard. With no syntax checking or debugger. In front of three scrutinizing neck-beards. Answer: Never. </p>\n\n<p>Now the logical followup question to this bold claim is: If the technical interview is a poor indicator of technical prowess, what's a good one? How do we separate the Michael Jordan's of programming from the...bad basketball player equivalent? To this, I say there are two alternate ways to accurately and easily gauge a programmers ability.</p>\n\n<ul>\n<li>Github profile: How many repo's do they have? How active are they? Do they contribute to open source projects? And then, of course, the obvious code quality questions.</li>\n<li>Programming project. Having an applicant complete a small task in their own time and in their own lair yield's both a better reading of ability and results in a much less stressful experience. This definitely does <strong>NOT</strong> mean a project on <a href=\"http://collabedit.com/\">collabedit</a> or an equivalent collaborative editor where someone is just virtually giving code the stink eye rather than in person. </li>\n</ul>\n\n<div style='text-align:center;'><img src=\"http://i.imgur.com/yO4UhUn.gif\" alt=\"hank\" / style='display:block;'><span style='font-size:10px; font-style:italic;'>me walking out of every technical interview ever</span></div>\n\n<hr />\n\n<h3 id=\"2itsunpleasantforallinvolved\">2. It's unpleasant for all involved.</h3>\n\n<p>Somewhat recently while working at <a href=\"http://www.theshelf.com/\">TheShelf</a> (awesome company that all fashion bloggers should want to be a part of), I had the opportunity to conduct my first technical interview. It started out innocuously enough with the usual pleasantries, but shit hit the fan real quick and real hard. The position was one which would require a fairly comprehensive knowledge of Javascript so I started the interview with - what I thought - was a fairly simple indicator of experience with closures (a programming paradigm). A few minutes in and after some bumbling about with the marker, still nothing was written on the white board. Five minutes later and I had written the first quarter of the answer on the board. Another ten minutes passed and now the atmosphere in the room was distinctly tense. Finally, after 15 minutes I had given her the entire answer and we cut off the interview there. I know it must have been terrible for her, but man it was pretty traumatic for me too. Bad technical interviews rank pretty damn high on the awkard scale.</p>\n\n<div style='text-align:center;'><img src=\"http://4.bp.blogspot.com/-Mddk7CwwhbY/Um9uqiX-OZI/AAAAAAAAOh0/ew3DCcen_vU/s1600/Doc-Rivers.gif\" alt=\"hank\" / style='display:block;'><span style='font-size:10px; font-style:italic;'>my face watching the train wreck unfold</span></div>\n\n<hr />\n\n<h3 id=\"3questionsarehardtocraftquestionsarehardtocraft\">3. Questions are hard to craft? Questions <em>are</em> hard to craft.</h3>\n\n<p>It's far too easy to underthink technical interview questions. They must - in fact - be tailored to the individual being interviewed. That is to say it's irresponsible to ask a 10+ years of experience professional what the difference between a method and a function is while the same question is perfectly appropriate for a recent grad. This makes the process of creating a suite of interview questions exhausting, error prone, and just a huge time-suck. </p>\n\n<hr />\n\n<p>Now us Python developers, Ruby developers, Java developers, PHP developers, and (God help you) Perl developers, let us put aside our meaningless and largely annoying quibbles to unite under a single banner. For once, let's say who cares whether Django or Rails is the superior framework and just join our voices to call for an end to the modern technical interview.  </p>\n\n<div style='text-align:center;'><img src=\"http://i.imgur.com/GF2CoJw.gif\" alt=\"hank\" / style='display:block;'><span style='font-size:10px; font-style:italic;'>to the technical interview, so say we all</span></div>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2014-05-05T15:29:56.000Z","created_by":1,"updated_at":"2014-05-05T15:59:49.000Z","updated_by":1,"published_at":"2014-05-05T15:59:49.000Z","published_by":1,"visibility":"public","mobiledoc":null,"amp":null},{"id":12,"uuid":"2f8940f4-5ce7-4439-a655-6fb97715c9de","title":"Accessing Google Analytics From Django","slug":"accessing-google-analytics-from-django","markdown":"Whew! It's been awhile since my last post, huh? So much for my \"...vow to keep up with this blog\" and bold statement that \"everyone else can do it, so damnit I can too\" mentioned in the [inaugoral post](http://blog.iambob.me/inaugural-address/). But - in my defense - I have been really busy. Like, actually busy, not playing videogames on the couch in my underwear busy. I started working full-time at [Rukkus](http://www.rukkus.com), built a pretty sweet [injector](https://github.com/steinbachr/django-js-variable-injector) for smartly managing Django template variables in external Javascript files, and otherwise kept myself fully booked. Anyways, today I'm going to talk about how to query the Google Analytics API from a Django app, a task I was presented with recently and hit a few major pain points tackling. So here goes.\n<div style='text-align:center;'>\n<img alt=\"not me\" src=\"http://i.imgur.com/GN1BC1P.gif\" style=\"margin-bottom:0; display:block;\" />\n<span style='font-size:smaller;font-style:italic;'>Because Bean</span>\n</div>\n\n----\n\nIn the age of API's, we've come to expect instant access to data on demand. When discussing a Google service, this expectation holds even firmer. Yet, querying the Google Analytics API has a few gotchas that can easily turn into major timesucks if not properly handled and while the official [tutorial](https://developers.google.com/analytics/solutions/articles/hello-analytics-api) is, by and large, a good start, it skims over some vital details.\n\n##Configuring the app\n####1. Create an API project\nTo start the process, go to https://code.google.com/apis/console/ and create a project if you don't already have one. Important to note is that the Google account under which you create the project should be the same one which you used to sign up for [Google Analytics](http://www.google.com/analytics/).\n\n---\n\n####2. Turn on the Analytics API\n![analytics](/content/images/2014/Aug/Screen-Shot-2014-08-03-at-7-21-12-PM.png)\n\n---\n\n####3. Go to the \"Credentials\" tab and under OAuth, click \"Create new Client ID\"\nAnd this is where some of the trickiness comes into play. If building a web app which will be making requests on behalf of a logged in user, this step is trivial - choose **Web Application**. However, if - like me - you are building a backend service which is responsible for querying the API as part of a cron job or some other server side task, you must select **Installed Application** and **other** for application type. More on this later.\n![](/content/images/2014/Aug/Screen-Shot-2014-08-03-at-7-23-32-PM.png)\n\n---\n\n####4. Download the JSON and save it as ``client_secrets.json``\n![](/content/images/2014/Aug/Screen-Shot-2014-08-03-at-7-42-14-PM.png)\n\n##Authentication\nBy and large, the authentication step follows what is specified in the official tutorial with a few key exceptions. But heck, we're feeling pretty bad-ass, so let's just take it from the top.\n\n---\n\n####1. Install the Google API Python Bindings\n``pip install --upgrade google-api-python-client``\n\n---\n\n####2. Import some packages\n```\nimport httplib2\nfrom apiclient.discovery import build\nfrom oauth2client.client import flow_from_clientsecrets\nfrom oauth2client.file import Storage\nfrom oauth2client.tools import run_flow\n```\n..like a boss\n\n---\n\n####3. Create a container class with some class-level fields\n```\nclass GoogleAnalytics(object):\n\tCLIENT_SECRETS = \"client_secrets.json\"\n\tFLOW = flow_from_clientsecrets(CLIENT_SECRETS, scope='https://www.googleapis.com/auth/analytics.readonly')\n\tTOKEN_FILE_NAME = 'analytics.dat'\n\tVIEW_ID = '/* Your Profile View Id */'\n```\nSome important things to note here:\n\n1. Your ``VIEW_ID`` can be found in your analytics console's admin page. ![](/content/images/2014/Aug/Screen-Shot-2014-08-03-at-7-37-27-PM.png)\n2. ``CLIENT_SECRETS`` should be the absolute path of the file JSON file downloaded earlier.\n\n---\n\n####4. Add the boilerplate authentication code\n```\ndef __init__(self):\n\tself.service = None\n\ndef _authenticate(self):\n  # Retrieve existing credendials\n  storage = Storage(self.TOKEN_FILE_NAME)\n  credentials = storage.get()\n\n  if credentials is None or credentials.invalid:\n  \tcredentials = run_flow(self.FLOW, storage, self.GAFlags())\n\n  return credentials\n\ndef _create_service(self):\n  # 1. Create an http object\n  http = httplib2.Http()\n\n  # 2. Authorize the http object\n  credentials = self._authenticate()\n  http = credentials.authorize(http) \n\n  # 3. Build the Analytics Service Object with the authorized http object\n  return build('analytics', 'v3', http=http)\n\ndef start_service(self):\n  \"\"\"\n  :return: ``this`` Google analytics object with the service set\n\n  start the service which may be used to query the google analytics api\n  \"\"\"\n  if not self.service:\n  \tself.service = self._create_service()\n  return self\n```\nmost of this is ripped wholesale from the official [tutorial](https://developers.google.com/analytics/solutions/articles/hello-analytics-api). However, if you were to run this right now you would notice you get an error that ``self.GAFlags`` isn't defined, and this is indeed the case. So let's add it and then I'll explain why we need it. \n\n---\n\n####4. Add a GAFlags class\n```\nclass GAFlags():\n  \"\"\"\n  total hack. If you want to see why, examine apiclient.sample_tools. The python bindings as well as the documentation kind've forgot to mention this...which is a big deal..but actually though.\n  \"\"\"\n  noauth_local_webserver = True\n  logging_level = \"DEBUG\"\n```\nWhat this flags class is allowing us to do is run the authentication flow in ``noauth_local_webserver`` mode. Basically, this means that we don't want to start a webserver for authentication because we're already running one. \n\n\n##Making Queries\nNow that you've successfully authenticated, it's on to the fun stuff, actually accessing your GA data. My generic query method looks as follows:\n```\ndef query(self, **kwargs):\n  kwargs.update({\n  'ids': \"ga:{id}\".format(id=self.VIEW_ID),\n  })\n\n  result = self.service.data().ga().get(**kwargs)\n  return result\n```\n\nSo to get - for instance - the number of sessions, organic searches, and page views in the past day, we would run:\n```\nGoogleAnalytics().start_service().query(start_date=str((datetime.datetime.now() - datetime.timedelta(days=1)).date()), end_date=str(datetime.datetime.now().date()), metrics='ga:organicSearches,ga:sessions,ga:pageviews'\n```\n\n---\n\nAhhh! Feels good to finally be writing again. After reading this post, hopefully you now know how to create an API project on Google, authenticate using OAuth, and query your sites GA data.\n\n<div style='text-align:center;'>\n<img alt=\"not me\" src=\"http://i.imgur.com/M8S4vuG.jpg\" style=\"margin-bottom:0; display:block;\" />\n<span style='font-size:smaller;font-style:italic;'>You after plotting GA session information in a time series graph. Nerd!</span>\n</div>","html":"<p>Whew! It's been awhile since my last post, huh? So much for my \"...vow to keep up with this blog\" and bold statement that \"everyone else can do it, so damnit I can too\" mentioned in the <a href=\"http://blog.iambob.me/inaugural-address/\">inaugoral post</a>. But - in my defense - I have been really busy. Like, actually busy, not playing videogames on the couch in my underwear busy. I started working full-time at <a href=\"http://www.rukkus.com\">Rukkus</a>, built a pretty sweet <a href=\"https://github.com/steinbachr/django-js-variable-injector\">injector</a> for smartly managing Django template variables in external Javascript files, and otherwise kept myself fully booked. Anyways, today I'm going to talk about how to query the Google Analytics API from a Django app, a task I was presented with recently and hit a few major pain points tackling. So here goes.  </p>\n\n<div style='text-align:center;'>  \n<img alt=\"not me\" src=\"http://i.imgur.com/GN1BC1P.gif\" style=\"margin-bottom:0; display:block;\" />  \n<span style='font-size:smaller;font-style:italic;'>Because Bean</span>  \n</div>\n\n<hr />\n\n<p>In the age of API's, we've come to expect instant access to data on demand. When discussing a Google service, this expectation holds even firmer. Yet, querying the Google Analytics API has a few gotchas that can easily turn into major timesucks if not properly handled and while the official <a href=\"https://developers.google.com/analytics/solutions/articles/hello-analytics-api\">tutorial</a> is, by and large, a good start, it skims over some vital details.</p>\n\n<h2 id=\"configuringtheapp\">Configuring the app</h2>\n\n<h4 id=\"1createanapiproject\">1. Create an API project</h4>\n\n<p>To start the process, go to <a href=\"https://code.google.com/apis/console/\">https://code.google.com/apis/console/</a> and create a project if you don't already have one. Important to note is that the Google account under which you create the project should be the same one which you used to sign up for <a href=\"http://www.google.com/analytics/\">Google Analytics</a>.</p>\n\n<hr />\n\n<h4 id=\"2turnontheanalyticsapi\">2. Turn on the Analytics API</h4>\n\n<p><img src=\"/content/images/2014/Aug/Screen-Shot-2014-08-03-at-7-21-12-PM.png\" alt=\"analytics\" /></p>\n\n<hr />\n\n<h4 id=\"3gotothecredentialstabandunderoauthclickcreatenewclientid\">3. Go to the \"Credentials\" tab and under OAuth, click \"Create new Client ID\"</h4>\n\n<p>And this is where some of the trickiness comes into play. If building a web app which will be making requests on behalf of a logged in user, this step is trivial - choose <strong>Web Application</strong>. However, if - like me - you are building a backend service which is responsible for querying the API as part of a cron job or some other server side task, you must select <strong>Installed Application</strong> and <strong>other</strong> for application type. More on this later. <br />\n<img src=\"/content/images/2014/Aug/Screen-Shot-2014-08-03-at-7-23-32-PM.png\" alt=\"\" /></p>\n\n<hr />\n\n<h4 id=\"4downloadthejsonandsaveitasclient_secretsjson\">4. Download the JSON and save it as <code>client_secrets.json</code></h4>\n\n<p><img src=\"/content/images/2014/Aug/Screen-Shot-2014-08-03-at-7-42-14-PM.png\" alt=\"\" /></p>\n\n<h2 id=\"authentication\">Authentication</h2>\n\n<p>By and large, the authentication step follows what is specified in the official tutorial with a few key exceptions. But heck, we're feeling pretty bad-ass, so let's just take it from the top.</p>\n\n<hr />\n\n<h4 id=\"1installthegoogleapipythonbindings\">1. Install the Google API Python Bindings</h4>\n\n<p><code>pip install --upgrade google-api-python-client</code></p>\n\n<hr />\n\n<h4 id=\"2importsomepackages\">2. Import some packages</h4>\n\n<pre><code>import httplib2  \nfrom apiclient.discovery import build  \nfrom oauth2client.client import flow_from_clientsecrets  \nfrom oauth2client.file import Storage  \nfrom oauth2client.tools import run_flow  \n</code></pre>\n\n<p>..like a boss</p>\n\n<hr />\n\n<h4 id=\"3createacontainerclasswithsomeclasslevelfields\">3. Create a container class with some class-level fields</h4>\n\n<pre><code>class GoogleAnalytics(object):  \n    CLIENT_SECRETS = \"client_secrets.json\"\n    FLOW = flow_from_clientsecrets(CLIENT_SECRETS, scope='https://www.googleapis.com/auth/analytics.readonly')\n    TOKEN_FILE_NAME = 'analytics.dat'\n    VIEW_ID = '/* Your Profile View Id */'\n</code></pre>\n\n<p>Some important things to note here:</p>\n\n<ol>\n<li>Your <code>VIEW_ID</code> can be found in your analytics console's admin page. <img src=\"/content/images/2014/Aug/Screen-Shot-2014-08-03-at-7-37-27-PM.png\" alt=\"\" title=\"\" />  </li>\n<li><code>CLIENT_SECRETS</code> should be the absolute path of the file JSON file downloaded earlier.</li>\n</ol>\n\n<hr />\n\n<h4 id=\"4addtheboilerplateauthenticationcode\">4. Add the boilerplate authentication code</h4>\n\n<pre><code>def __init__(self):  \n    self.service = None\n\ndef _authenticate(self):  \n  # Retrieve existing credendials\n  storage = Storage(self.TOKEN_FILE_NAME)\n  credentials = storage.get()\n\n  if credentials is None or credentials.invalid:\n      credentials = run_flow(self.FLOW, storage, self.GAFlags())\n\n  return credentials\n\ndef _create_service(self):  \n  # 1. Create an http object\n  http = httplib2.Http()\n\n  # 2. Authorize the http object\n  credentials = self._authenticate()\n  http = credentials.authorize(http) \n\n  # 3. Build the Analytics Service Object with the authorized http object\n  return build('analytics', 'v3', http=http)\n\ndef start_service(self):  \n  \"\"\"\n  :return: ``this`` Google analytics object with the service set\n\n  start the service which may be used to query the google analytics api\n  \"\"\"\n  if not self.service:\n      self.service = self._create_service()\n  return self\n</code></pre>\n\n<p>most of this is ripped wholesale from the official <a href=\"https://developers.google.com/analytics/solutions/articles/hello-analytics-api\">tutorial</a>. However, if you were to run this right now you would notice you get an error that <code>self.GAFlags</code> isn't defined, and this is indeed the case. So let's add it and then I'll explain why we need it. </p>\n\n<hr />\n\n<h4 id=\"4addagaflagsclass\">4. Add a GAFlags class</h4>\n\n<pre><code>class GAFlags():  \n  \"\"\"\n  total hack. If you want to see why, examine apiclient.sample_tools. The python bindings as well as the documentation kind've forgot to mention this...which is a big deal..but actually though.\n  \"\"\"\n  noauth_local_webserver = True\n  logging_level = \"DEBUG\"\n</code></pre>\n\n<p>What this flags class is allowing us to do is run the authentication flow in <code>noauth_local_webserver</code> mode. Basically, this means that we don't want to start a webserver for authentication because we're already running one. </p>\n\n<h2 id=\"makingqueries\">Making Queries</h2>\n\n<p>Now that you've successfully authenticated, it's on to the fun stuff, actually accessing your GA data. My generic query method looks as follows:  </p>\n\n<pre><code>def query(self, **kwargs):  \n  kwargs.update({\n  'ids': \"ga:{id}\".format(id=self.VIEW_ID),\n  })\n\n  result = self.service.data().ga().get(**kwargs)\n  return result\n</code></pre>\n\n<p>So to get - for instance - the number of sessions, organic searches, and page views in the past day, we would run:  </p>\n\n<pre><code>GoogleAnalytics().start_service().query(start_date=str((datetime.datetime.now() - datetime.timedelta(days=1)).date()), end_date=str(datetime.datetime.now().date()), metrics='ga:organicSearches,ga:sessions,ga:pageviews'  \n</code></pre>\n\n<hr />\n\n<p>Ahhh! Feels good to finally be writing again. After reading this post, hopefully you now know how to create an API project on Google, authenticate using OAuth, and query your sites GA data.</p>\n\n<div style='text-align:center;'>  \n<img alt=\"not me\" src=\"http://i.imgur.com/M8S4vuG.jpg\" style=\"margin-bottom:0; display:block;\" />  \n<span style='font-size:smaller;font-style:italic;'>You after plotting GA session information in a time series graph. Nerd!</span>  \n</div>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2014-08-03T22:48:51.000Z","created_by":1,"updated_at":"2014-08-03T23:25:19.000Z","updated_by":1,"published_at":"2014-08-03T23:23:35.000Z","published_by":1,"visibility":"public","mobiledoc":null,"amp":null},{"id":13,"uuid":"0d0e274e-7aac-42db-914a-746c4492c023","title":"You've been upgraded to the latest version of Ghost","slug":"ghost-0-7","markdown":"You've just upgraded to the latest version of Ghost and we've made a few changes that you should probably know about!\n\n## Woah, why does everything look different?\n\nAfter two years and hundreds of thousands of users, we learned a great deal about what was (and wasn't) working in the old Ghost admin user interface. What you're looking at is Ghost's first major UI refresh, with a strong focus on being more usable and robust all round.\n\n![New Design](https://ghost.org/images/zelda.png)\n\nThe main navigation menu, previously located at the top of your screen, has now moved over to the left. This makes it way easier to work with on mobile devices, and has the added benefit of providing ample space for upcoming features!\n\n## Lost and found: Your old posts\n\nFrom talking to many of you we understand that finding old posts in the admin area was a real pain; so we've added a new magical search bar which lets you quickly find posts for editing, without having to scroll endlessly. Take it for a spin!\n\n![Search](https://ghost.org/images/search.gif)\n\nQuestions? Comments? Send us a tweet [@TryGhost](https://twitter.com/tryghost)\n\nOh, and yes – you can safely delete this draft post!","html":"<p>You've just upgraded to the latest version of Ghost and we've made a few changes that you should probably know about!</p>\n\n<h2 id=\"woahwhydoeseverythinglookdifferent\">Woah, why does everything look different?</h2>\n\n<p>After two years and hundreds of thousands of users, we learned a great deal about what was (and wasn't) working in the old Ghost admin user interface. What you're looking at is Ghost's first major UI refresh, with a strong focus on being more usable and robust all round.</p>\n\n<p><img src=\"https://ghost.org/images/zelda.png\" alt=\"New Design\" /></p>\n\n<p>The main navigation menu, previously located at the top of your screen, has now moved over to the left. This makes it way easier to work with on mobile devices, and has the added benefit of providing ample space for upcoming features!</p>\n\n<h2 id=\"lostandfoundyouroldposts\">Lost and found: Your old posts</h2>\n\n<p>From talking to many of you we understand that finding old posts in the admin area was a real pain; so we've added a new magical search bar which lets you quickly find posts for editing, without having to scroll endlessly. Take it for a spin!</p>\n\n<p><img src=\"https://ghost.org/images/search.gif\" alt=\"Search\" /></p>\n\n<p>Questions? Comments? Send us a tweet <a href=\"https://twitter.com/tryghost\">@TryGhost</a></p>\n\n<p>Oh, and yes – you can safely delete this draft post!</p>","image":null,"featured":0,"page":0,"status":"draft","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2015-09-03T13:43:30.000Z","created_by":1,"updated_at":"2015-09-03T13:43:30.000Z","updated_by":1,"published_at":"2015-09-03T13:43:30.000Z","published_by":null,"visibility":"public","mobiledoc":null,"amp":null},{"id":14,"uuid":"6801d87c-8290-4e3e-acd2-92cf9cd76c99","title":"Open Questions (on tech, growth, and life..well, not life)","slug":"i-have-questions-you-have-answers","markdown":"I'm back! After months of ignoring this blog, I'm ready to re-commit myself to the frustration of staring at a white screen. Ready to introspect and navigate my thought-space, searching for topics I care deeply enough to pound on a keyboard for.  I'm ready to feel my eyes glaze over as I come to the one rational explanation: I'm a boring, knowledge-less, vacuum of a human being. So, full disclosure, this blog post is a result of one such depression session. Upon realizing that I know nothing, I've decided to ask the community some of my many questions.\n\n----\n\n### Question 1: How can React be so powerful and intuitive while Flux just...isn't\n<br />\n\nConsider the following simple set of React components:\n```\nconst TodoListRow = React.createClass({\n  render: function() { \n    return <div>{this.props.value}</div>\n})\n\nconst TodoListBody = React.createClass({\n  render: function() { \n    var rows = this.props.items.map(function(item) { \n      return <TodoListRow value={item} />\n    });\n\n    return (\n      <div>\n        {rows}\n      </div>\n    )\n  }\n})\n\n// show the currently selected todo list item\nconst TodoListHeader = React.createClass({\n  render: function() {\n    return <h1>{this.props.item}</h1>\n  }\n})\n\nconst TodoList = React.createClass({\n  getInitialState: function() {\n    return {selected: \"\"}\n  },\n\n  render: function() {\n    var items = ['get a job', 'dont eat soap', 'try not to be the worst']\n\n    return (\n      <div>\n        <TodoListBody items={items} />\n        <TodoListHeader item={this.state.selected} />\n      </div>  \n    ) \n  }\n});\n```\n\nAh, the perennial 'TodoList'. Ubiquitous, unoriginal, precursor to many an uninteresting example, and now our subject of study. Now, the basic React way of updating the header to stay in sync with the selected list item could be accomplished via callback like so:\n\n```\nconst TodoListRow = React.createClass({\n  onSelected: function() {\n    this.props.onClick(this.props.value);\n  },\n\n  render: function() { \n    return <div onClick={this.onSelected}>{this.props.value}</div>\n})\n\nconst TodoListBody = React.createClass({\n  render: function() { \n    var rows = this.props.items.map(function(item) { \n      return <TodoListRow value={item} onClick={this.props.onClick} />\n    }.bind(this));\n\n    return (\n      <div>\n        {rows}\n      </div>\n    )\n  }\n})\n\n// show the currently selected todo list item\nconst TodoListHeader = React.createClass({\n  render: function() {\n    return <h1>{this.props.item}</h1>\n  }\n})\n\nconst TodoList = React.createClass({\n  getInitialState: function() {\n    return {selected: \"\"}\n  },\n\n  onItemSelected: function(item) {\n    this.setState({selected: item});\n  },\n\n  render: function() {\n    var items = ['get a job', 'dont eat soap', 'try not to be the worst']\n\n    return (\n      <div>\n        <TodoListBody items={items} onClick={this.onItemSelected} />\n        <TodoListHeader item={this.state.selected} />\n      </div>  \n    ) \n  }\n});\n```\nBut why do I feel inexplicably...dirty...after writing that? Well, with deeply nested components or components tracking multiple event types, this process feels deeply and personally repetitive. It feels like the opposite of DRY, or YRD (You're Repeating, Dumbass). Enter Flux, the answer to inter-component communication. \n\nWhile in theory Flux brings some much needed Backbone (<-  eh?) to the View heavy React, it drags with it some topics that seem ambiguous at best and vestigial at worst. Here's the basic structure of a Flux application.\n\n<div style='text-align:center;'>\n<img alt=\"flux\" src=\"https://facebook.github.io/flux/img/flux-simple-f8-diagram-1300w.png\" style=\"margin-bottom:0; display:block;\" />\n<span style='font-size:smaller;font-style:italic;'>Actions, Dispatchers, Stores...wut</span>\n</div>\n\nFor most MVC programmers the \"Store\" and \"View\" components of this model should feel familiar. As for the \"Action\" and \"Dispatcher\" components, presumably these together comprise the controller. So far so good. However, this is where things take a turn for the worst. Rather than fold the Action, Dispatcher, and Store into a library then calling into these abstractions in our React views, these components are instead left as abstract interfaces, requiring implementation by anyone wishing to use them. Don't believe me? Check out the Todo example given by Flux [here](https://facebook.github.io/flux/docs/todo-list.html#content) (simple fiddle [here](http://jsfiddle.net/6rauuetb/)) and compare it to it's [knockout](http://jsfiddle.net/icoxfog417/sujqa/) and [angular](http://jsfiddle.net/icoxfog417/nLC3g/) counterparts. To me, the most immediately obvious difference between the three is the relative lack of clarity found in the Flux variation.\n\nNow, I know the naysayers will respond with the (fair) argument that Flux explicitly states it is not a framework, but rather an architecture for building applications. To this I respond: I know that dummy! But, Flux really ought to be a framework in the same way that Angular, Knockout, and the multitude of other JS frameworks are. Javascript development is such that uniformity, conciseness, and best practice should rule paramount, all things provided by a good framework. Without these tenants, Javascript has a particular propensity for dissolving into a formless goo.\n\n*Open Question<br />What am I doing wrong? Why does Flux feel so awkward and how should I be using it better?*\n\n<div style='text-align:center;'>\n<img alt=\"flux\" src=\"http://i.imgur.com/cIRSSVF.gif\" style=\"margin-bottom:0; display:block;\" />\n<span style='font-size:smaller;font-style:italic;'>After a day learning Flux </span>\n</div>\n\n---\n\n### Question 2: Why is Adwords so skewed to favor big spenders?\n<br />\n\nThis one in particular really grinds my gears. \n\n<div style='text-align:center;'>\n<img alt=\"flux\" src=\"http://vignette1.wikia.nocookie.net/familyguy/images/c/c5/Grinds-my-gears1.jpg/revision/latest?cb=20100119021134\" style=\"margin-bottom:0; display:block;\" />\n<span style='font-size:smaller;font-style:italic;'>Obligatory </span>\n</div>\n<br />\n\nTruly, organic results are one thing (of course it should take time to build an organic profile, seeing as people trust names they recognize, therefore they're more likely to click on recognizable names, therefore the most relevant results should be the most recognizable) and paid results are another. That distinction made, how can a young company hope to compete in the heavy-hitting world of PPC while monstrous enterprises are freely allowed to throw money at the problem? \n\nYes, before the torches come out and the crowd pulls out their pitchforks, I know what long-tail marketing is. I know these results are a viable target for PPC due to their relatively low CPC and sparser bid landscape. But, and there is a big but, for a company that needs to grow - and do so quickly - settling for .5, 1, or 2% of traffic as the titans devour the remaining 98% just doesn't cut it. \n\nSo what's my proposed solution? That's a damn good question. Perhaps in order to answer that question, it's important to first consider what Adwords must deem relevant when deciding which ads to serve. Presumably the 3 factors that matter most when deciding Ad visibility are:\n\n1) Bid price. This is the easy one and most easily exploited by the giants.\n2) Session / Bounce rate and time on site. What percent of people click through and then bounce? How long is the average visitor session upon click through?\n3) Device type + site compatibility. Is the user navigating on a mobile device? If so, is the site mobile friendly?\n\nPhew, glad we got that out of the way. So those points laid out, what would I propose as a way to counteract Adwords monopoly by larger companies? The answer is actually quite simple: Provide a heavier weight to points (2) and (3) than (1). Now, I have no doubt there is some weight already placed on these items, however it is my opinion that the order of preference currently goes (1), (2), (3) where it really ought to be (2), (3), (1). C'mon Google, give the little guy a chance.\n\n\n*Open Question<br />\nFor the companies that aren't Amazon, how do you compete on Adwords? What does your ROAS look like and what have you done to evolve your ad spend technique?*\n\n---\n\n### Question 3: When will demand for engineers be outpaced by job seekers seeing the wealth of opportunity in tech?\n<br />\n\nI have this \"friend\" let's call John. John has worked in tech as a web and Android developer since he graduated from a respectable university with a Computer Science degree 2 years ago. Many of John's friends have had trouble finding jobs since graduation. Of John's friends that have found jobs, most of those jobs pay well below John's. John isn't an idiot, so John wonders: How can this trend possibly continue? At what point will undergraduates and their parents, seeing the difficulty obtaining a job upon graduation, flock to engineering tracks? Has this process already started?\n\n*Open Question<br />\nHow many switched jobs explicitly to exploit the current demand for engineers? How much worry is there that the market will quickly be saturated by new graduates / industry switchers, thereby making the process of getting an engineering job much more competitive (specifically in tech)?*\n\n---\n\nSo people, looks like you have your work cut out for you. If you have answers to any of these questions or want to pose your own, comment below or shoot me an email at [steinbach.rj@gmail.com](mailto:steinbach.rj@gmail.com). \n","html":"<p>I'm back! After months of ignoring this blog, I'm ready to re-commit myself to the frustration of staring at a white screen. Ready to introspect and navigate my thought-space, searching for topics I care deeply enough to pound on a keyboard for.  I'm ready to feel my eyes glaze over as I come to the one rational explanation: I'm a boring, knowledge-less, vacuum of a human being. So, full disclosure, this blog post is a result of one such depression session. Upon realizing that I know nothing, I've decided to ask the community some of my many questions.</p>\n\n<hr />\n\n<h3 id=\"question1howcanreactbesopowerfulandintuitivewhilefluxjustisnt\">Question 1: How can React be so powerful and intuitive while Flux just...isn't</h3>\n\n<p><br /></p>\n\n<p>Consider the following simple set of React components:  </p>\n\n<pre><code>const TodoListRow = React.createClass({  \n  render: function() { \n    return &lt;div&gt;{this.props.value}&lt;/div&gt;\n})\n\nconst TodoListBody = React.createClass({  \n  render: function() { \n    var rows = this.props.items.map(function(item) { \n      return &lt;TodoListRow value={item} /&gt;\n    });\n\n    return (\n      &lt;div&gt;\n        {rows}\n      &lt;/div&gt;\n    )\n  }\n})\n\n// show the currently selected todo list item\nconst TodoListHeader = React.createClass({  \n  render: function() {\n    return &lt;h1&gt;{this.props.item}&lt;/h1&gt;\n  }\n})\n\nconst TodoList = React.createClass({  \n  getInitialState: function() {\n    return {selected: \"\"}\n  },\n\n  render: function() {\n    var items = ['get a job', 'dont eat soap', 'try not to be the worst']\n\n    return (\n      &lt;div&gt;\n        &lt;TodoListBody items={items} /&gt;\n        &lt;TodoListHeader item={this.state.selected} /&gt;\n      &lt;/div&gt;  \n    ) \n  }\n});\n</code></pre>\n\n<p>Ah, the perennial 'TodoList'. Ubiquitous, unoriginal, precursor to many an uninteresting example, and now our subject of study. Now, the basic React way of updating the header to stay in sync with the selected list item could be accomplished via callback like so:</p>\n\n<pre><code>const TodoListRow = React.createClass({  \n  onSelected: function() {\n    this.props.onClick(this.props.value);\n  },\n\n  render: function() { \n    return &lt;div onClick={this.onSelected}&gt;{this.props.value}&lt;/div&gt;\n})\n\nconst TodoListBody = React.createClass({  \n  render: function() { \n    var rows = this.props.items.map(function(item) { \n      return &lt;TodoListRow value={item} onClick={this.props.onClick} /&gt;\n    }.bind(this));\n\n    return (\n      &lt;div&gt;\n        {rows}\n      &lt;/div&gt;\n    )\n  }\n})\n\n// show the currently selected todo list item\nconst TodoListHeader = React.createClass({  \n  render: function() {\n    return &lt;h1&gt;{this.props.item}&lt;/h1&gt;\n  }\n})\n\nconst TodoList = React.createClass({  \n  getInitialState: function() {\n    return {selected: \"\"}\n  },\n\n  onItemSelected: function(item) {\n    this.setState({selected: item});\n  },\n\n  render: function() {\n    var items = ['get a job', 'dont eat soap', 'try not to be the worst']\n\n    return (\n      &lt;div&gt;\n        &lt;TodoListBody items={items} onClick={this.onItemSelected} /&gt;\n        &lt;TodoListHeader item={this.state.selected} /&gt;\n      &lt;/div&gt;  \n    ) \n  }\n});\n</code></pre>\n\n<p>But why do I feel inexplicably...dirty...after writing that? Well, with deeply nested components or components tracking multiple event types, this process feels deeply and personally repetitive. It feels like the opposite of DRY, or YRD (You're Repeating, Dumbass). Enter Flux, the answer to inter-component communication. </p>\n\n<p>While in theory Flux brings some much needed Backbone (&lt;-  eh?) to the View heavy React, it drags with it some topics that seem ambiguous at best and vestigial at worst. Here's the basic structure of a Flux application.</p>\n\n<div style='text-align:center;'>  \n<img alt=\"flux\" src=\"https://facebook.github.io/flux/img/flux-simple-f8-diagram-1300w.png\" style=\"margin-bottom:0; display:block;\" />  \n<span style='font-size:smaller;font-style:italic;'>Actions, Dispatchers, Stores...wut</span>  \n</div>\n\n<p>For most MVC programmers the \"Store\" and \"View\" components of this model should feel familiar. As for the \"Action\" and \"Dispatcher\" components, presumably these together comprise the controller. So far so good. However, this is where things take a turn for the worst. Rather than fold the Action, Dispatcher, and Store into a library then calling into these abstractions in our React views, these components are instead left as abstract interfaces, requiring implementation by anyone wishing to use them. Don't believe me? Check out the Todo example given by Flux <a href=\"https://facebook.github.io/flux/docs/todo-list.html#content\">here</a> (simple fiddle <a href=\"http://jsfiddle.net/6rauuetb/\">here</a>) and compare it to it's <a href=\"http://jsfiddle.net/icoxfog417/sujqa/\">knockout</a> and <a href=\"http://jsfiddle.net/icoxfog417/nLC3g/\">angular</a> counterparts. To me, the most immediately obvious difference between the three is the relative lack of clarity found in the Flux variation.</p>\n\n<p>Now, I know the naysayers will respond with the (fair) argument that Flux explicitly states it is not a framework, but rather an architecture for building applications. To this I respond: I know that dummy! But, Flux really ought to be a framework in the same way that Angular, Knockout, and the multitude of other JS frameworks are. Javascript development is such that uniformity, conciseness, and best practice should rule paramount, all things provided by a good framework. Without these tenants, Javascript has a particular propensity for dissolving into a formless goo.</p>\n\n<p><em>Open Question<br />What am I doing wrong? Why does Flux feel so awkward and how should I be using it better?</em></p>\n\n<div style='text-align:center;'>  \n<img alt=\"flux\" src=\"http://i.imgur.com/cIRSSVF.gif\" style=\"margin-bottom:0; display:block;\" />  \n<span style='font-size:smaller;font-style:italic;'>After a day learning Flux </span>  \n</div>\n\n<hr />\n\n<h3 id=\"question2whyisadwordssoskewedtofavorbigspenders\">Question 2: Why is Adwords so skewed to favor big spenders?</h3>\n\n<p><br /></p>\n\n<p>This one in particular really grinds my gears. </p>\n\n<div style='text-align:center;'>  \n<img alt=\"flux\" src=\"http://vignette1.wikia.nocookie.net/familyguy/images/c/c5/Grinds-my-gears1.jpg/revision/latest?cb=20100119021134\" style=\"margin-bottom:0; display:block;\" />  \n<span style='font-size:smaller;font-style:italic;'>Obligatory </span>  \n</div>  \n\n<p><br /></p>\n\n<p>Truly, organic results are one thing (of course it should take time to build an organic profile, seeing as people trust names they recognize, therefore they're more likely to click on recognizable names, therefore the most relevant results should be the most recognizable) and paid results are another. That distinction made, how can a young company hope to compete in the heavy-hitting world of PPC while monstrous enterprises are freely allowed to throw money at the problem? </p>\n\n<p>Yes, before the torches come out and the crowd pulls out their pitchforks, I know what long-tail marketing is. I know these results are a viable target for PPC due to their relatively low CPC and sparser bid landscape. But, and there is a big but, for a company that needs to grow - and do so quickly - settling for .5, 1, or 2% of traffic as the titans devour the remaining 98% just doesn't cut it. </p>\n\n<p>So what's my proposed solution? That's a damn good question. Perhaps in order to answer that question, it's important to first consider what Adwords must deem relevant when deciding which ads to serve. Presumably the 3 factors that matter most when deciding Ad visibility are:</p>\n\n<p>1) Bid price. This is the easy one and most easily exploited by the giants. <br />\n2) Session / Bounce rate and time on site. What percent of people click through and then bounce? How long is the average visitor session upon click through? <br />\n3) Device type + site compatibility. Is the user navigating on a mobile device? If so, is the site mobile friendly?</p>\n\n<p>Phew, glad we got that out of the way. So those points laid out, what would I propose as a way to counteract Adwords monopoly by larger companies? The answer is actually quite simple: Provide a heavier weight to points (2) and (3) than (1). Now, I have no doubt there is some weight already placed on these items, however it is my opinion that the order of preference currently goes (1), (2), (3) where it really ought to be (2), (3), (1). C'mon Google, give the little guy a chance.</p>\n\n<p><em>Open Question<br />\nFor the companies that aren't Amazon, how do you compete on Adwords? What does your ROAS look like and what have you done to evolve your ad spend technique?</em></p>\n\n<hr />\n\n<h3 id=\"question3whenwilldemandforengineersbeoutpacedbyjobseekersseeingthewealthofopportunityintech\">Question 3: When will demand for engineers be outpaced by job seekers seeing the wealth of opportunity in tech?</h3>\n\n<p><br /></p>\n\n<p>I have this \"friend\" let's call John. John has worked in tech as a web and Android developer since he graduated from a respectable university with a Computer Science degree 2 years ago. Many of John's friends have had trouble finding jobs since graduation. Of John's friends that have found jobs, most of those jobs pay well below John's. John isn't an idiot, so John wonders: How can this trend possibly continue? At what point will undergraduates and their parents, seeing the difficulty obtaining a job upon graduation, flock to engineering tracks? Has this process already started?</p>\n\n<p><em>Open Question<br />\nHow many switched jobs explicitly to exploit the current demand for engineers? How much worry is there that the market will quickly be saturated by new graduates / industry switchers, thereby making the process of getting an engineering job much more competitive (specifically in tech)?</em></p>\n\n<hr />\n\n<p>So people, looks like you have your work cut out for you. If you have answers to any of these questions or want to pose your own, comment below or shoot me an email at <a href=\"mailto:steinbach.rj@gmail.com\">steinbach.rj@gmail.com</a>. </p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":"I Have Questions, You Have Answers","meta_description":"Open questions about tech, growth, and life...well not life","author_id":1,"created_at":"2016-01-24T20:04:21.000Z","created_by":1,"updated_at":"2016-01-24T23:42:47.000Z","updated_by":1,"published_at":"2016-01-24T23:42:47.000Z","published_by":1,"visibility":"public","mobiledoc":null,"amp":null}],"posts_tags":[{"id":3,"post_id":1,"tag_id":3,"sort_order":0},{"id":4,"post_id":1,"tag_id":4,"sort_order":1},{"id":5,"post_id":2,"tag_id":5,"sort_order":0},{"id":6,"post_id":2,"tag_id":6,"sort_order":1},{"id":7,"post_id":2,"tag_id":7,"sort_order":2},{"id":8,"post_id":2,"tag_id":8,"sort_order":3},{"id":9,"post_id":3,"tag_id":4,"sort_order":0},{"id":10,"post_id":3,"tag_id":6,"sort_order":1},{"id":11,"post_id":3,"tag_id":8,"sort_order":2},{"id":12,"post_id":3,"tag_id":9,"sort_order":3},{"id":13,"post_id":4,"tag_id":4,"sort_order":0},{"id":14,"post_id":4,"tag_id":6,"sort_order":1},{"id":15,"post_id":4,"tag_id":10,"sort_order":3},{"id":16,"post_id":4,"tag_id":11,"sort_order":4},{"id":17,"post_id":4,"tag_id":12,"sort_order":5},{"id":18,"post_id":4,"tag_id":13,"sort_order":6},{"id":19,"post_id":4,"tag_id":8,"sort_order":2},{"id":20,"post_id":5,"tag_id":6,"sort_order":0},{"id":21,"post_id":5,"tag_id":14,"sort_order":1},{"id":22,"post_id":6,"tag_id":6,"sort_order":0},{"id":23,"post_id":6,"tag_id":15,"sort_order":1},{"id":24,"post_id":7,"tag_id":6,"sort_order":0},{"id":25,"post_id":7,"tag_id":16,"sort_order":1},{"id":26,"post_id":7,"tag_id":18,"sort_order":3},{"id":27,"post_id":7,"tag_id":17,"sort_order":2},{"id":28,"post_id":8,"tag_id":6,"sort_order":0},{"id":29,"post_id":8,"tag_id":11,"sort_order":1},{"id":30,"post_id":8,"tag_id":19,"sort_order":2},{"id":31,"post_id":8,"tag_id":20,"sort_order":3},{"id":32,"post_id":8,"tag_id":21,"sort_order":4},{"id":33,"post_id":9,"tag_id":22,"sort_order":0},{"id":34,"post_id":10,"tag_id":6,"sort_order":0},{"id":35,"post_id":10,"tag_id":8,"sort_order":1},{"id":36,"post_id":10,"tag_id":23,"sort_order":2},{"id":37,"post_id":11,"tag_id":8,"sort_order":0},{"id":38,"post_id":11,"tag_id":24,"sort_order":1},{"id":39,"post_id":11,"tag_id":25,"sort_order":2},{"id":40,"post_id":12,"tag_id":8,"sort_order":0},{"id":41,"post_id":12,"tag_id":10,"sort_order":1},{"id":42,"post_id":12,"tag_id":11,"sort_order":2},{"id":43,"post_id":12,"tag_id":26,"sort_order":3},{"id":44,"post_id":12,"tag_id":27,"sort_order":4},{"id":45,"post_id":14,"tag_id":1,"sort_order":0},{"id":46,"post_id":14,"tag_id":8,"sort_order":1},{"id":47,"post_id":14,"tag_id":28,"sort_order":2}],"roles":[{"id":1,"uuid":"614472ae-bf7d-492e-8328-76091eb6a03b","name":"Administrator","description":"Administrators","created_at":"2014-03-08T07:36:52.000Z","created_by":1,"updated_at":"2014-03-08T07:36:52.000Z","updated_by":1},{"id":2,"uuid":"fd381dfd-d2bb-478b-a915-88fb7da473dc","name":"Editor","description":"Editors","created_at":"2014-03-08T07:36:52.000Z","created_by":1,"updated_at":"2014-03-08T07:36:52.000Z","updated_by":1},{"id":3,"uuid":"b225717c-0229-423b-8d68-7f4bb0652dde","name":"Author","description":"Authors","created_at":"2014-03-08T07:36:52.000Z","created_by":1,"updated_at":"2014-03-08T07:36:52.000Z","updated_by":1},{"id":4,"uuid":"586ff599-624d-453c-81b2-0956f18d9c7d","name":"Owner","description":"Blog Owner","created_at":"2014-08-11T15:29:26.000Z","created_by":1,"updated_at":"2014-08-11T15:29:26.000Z","updated_by":1}],"roles_users":[{"id":1,"role_id":4,"user_id":1}],"settings":[{"id":1,"uuid":"bf5d7d4b-2dd4-41f2-b188-66fd440f9ba4","key":"databaseVersion","value":"009","type":"core","created_at":"2014-03-08T07:36:52.000Z","created_by":1,"updated_at":"2016-07-27T09:42:00.000Z","updated_by":1},{"id":2,"uuid":"bd4235c7-1e64-45ca-b235-d1640854f5cc","key":"dbHash","value":"48b7b6aa-4789-4ddd-bd2c-b96de93f7b72","type":"core","created_at":"2014-03-08T07:36:52.000Z","created_by":1,"updated_at":"2016-07-27T09:42:00.000Z","updated_by":1},{"id":3,"uuid":"9d3b67c0-5dc7-44a5-af26-f8a9b82e2e9c","key":"nextUpdateCheck","value":null,"type":"core","created_at":"2014-03-08T07:36:52.000Z","created_by":1,"updated_at":"2016-07-27T09:42:00.000Z","updated_by":1},{"id":4,"uuid":"92c8dcea-b328-4c92-9185-e7ec22d06637","key":"displayUpdateNotification","value":null,"type":"core","created_at":"2014-03-08T07:36:52.000Z","created_by":1,"updated_at":"2016-07-27T09:42:00.000Z","updated_by":1},{"id":5,"uuid":"5628ff47-f8c0-452b-9456-2a10ca45836c","key":"title","value":"I Am Bob, Hear Me Rawr","type":"blog","created_at":"2014-03-08T07:36:52.000Z","created_by":1,"updated_at":"2016-07-27T09:42:00.000Z","updated_by":1},{"id":6,"uuid":"64b3dd54-1c99-42d9-ac77-a0dcd53bff56","key":"description","value":"A blog about programming and whatever else I damn well please.","type":"blog","created_at":"2014-03-08T07:36:52.000Z","created_by":1,"updated_at":"2016-07-27T09:42:00.000Z","updated_by":1},{"id":7,"uuid":"be001473-30b5-41eb-993f-4b21e5f889e6","key":"email","value":"steinbach.rj@gmail.com","type":"blog","created_at":"2014-03-08T07:36:52.000Z","created_by":1,"updated_at":"2016-07-27T09:42:00.000Z","updated_by":1},{"id":8,"uuid":"ce964114-4e29-4a2e-9d91-76a014e638b7","key":"logo","value":"/content/images/2014/Mar/Backstep_small.png","type":"blog","created_at":"2014-03-08T07:36:52.000Z","created_by":1,"updated_at":"2016-07-27T09:42:00.000Z","updated_by":1},{"id":9,"uuid":"758c006b-0ac0-4a73-bf41-df5f2e44b3d4","key":"cover","value":"/content/images/2014/Mar/1077871_10200335699419222_76042724_o.jpg","type":"blog","created_at":"2014-03-08T07:36:52.000Z","created_by":1,"updated_at":"2016-07-27T09:42:00.000Z","updated_by":1},{"id":10,"uuid":"f53b69a4-ddd9-4266-acfd-46a974f4e2f2","key":"defaultLang","value":"en_US","type":"blog","created_at":"2014-03-08T07:36:52.000Z","created_by":1,"updated_at":"2016-07-27T09:42:00.000Z","updated_by":1},{"id":11,"uuid":"8ce679ce-56c3-495a-8e8b-3aa68ef0013b","key":"postsPerPage","value":"6","type":"blog","created_at":"2014-03-08T07:36:52.000Z","created_by":1,"updated_at":"2016-07-27T09:42:00.000Z","updated_by":1},{"id":12,"uuid":"2194a885-28ac-478a-897e-665f896c2756","key":"forceI18n","value":"true","type":"blog","created_at":"2014-03-08T07:36:52.000Z","created_by":1,"updated_at":"2016-07-27T09:42:00.000Z","updated_by":1},{"id":13,"uuid":"9d848024-ecce-417b-b051-0d2fb6266284","key":"permalinks","value":"/:slug/","type":"blog","created_at":"2014-03-08T07:36:52.000Z","created_by":1,"updated_at":"2016-07-27T09:42:00.000Z","updated_by":1},{"id":14,"uuid":"0d04e1a2-c35e-4968-a46d-ba0fc5f9e8e6","key":"activeTheme","value":"custom_theme","type":"theme","created_at":"2014-03-08T07:36:52.000Z","created_by":1,"updated_at":"2016-07-27T09:42:00.000Z","updated_by":1},{"id":15,"uuid":"d9a8be9e-d26a-4e55-ab1e-3c1134b4d037","key":"activePlugins","value":"[]","type":"plugin","created_at":"2014-03-08T07:36:52.000Z","created_by":1,"updated_at":"2016-07-27T09:42:00.000Z","updated_by":1},{"id":16,"uuid":"3788ed41-1330-4fca-8685-2618d85b027b","key":"installedPlugins","value":"[]","type":"plugin","created_at":"2014-03-08T07:36:52.000Z","created_by":1,"updated_at":"2016-07-27T09:42:00.000Z","updated_by":1},{"id":17,"uuid":"b0cb50f5-f0dd-47a7-a9ab-d2679727b83e","key":"activeApps","value":"[]","type":"app","created_at":"2014-03-26T20:54:40.000Z","created_by":1,"updated_at":"2016-07-27T09:42:00.000Z","updated_by":1},{"id":18,"uuid":"9e9e0991-3af7-43aa-8c3a-32e61aacc30a","key":"installedApps","value":"[]","type":"app","created_at":"2014-03-26T20:54:40.000Z","created_by":1,"updated_at":"2016-10-08T06:20:37.000Z","updated_by":1},{"id":19,"uuid":"830e0243-78ab-433d-9dd2-bc6ba2dac9da","key":"ghost_head","value":"","type":"blog","created_at":"2014-12-05T13:58:58.000Z","created_by":1,"updated_at":"2016-07-27T09:42:00.000Z","updated_by":1},{"id":20,"uuid":"51daf9e3-4af5-4bd3-8d21-652925003161","key":"ghost_foot","value":"<!-- You can safely delete this line if your theme does not require jQuery -->\n<script type=\"text/javascript\" src=\"https://code.jquery.com/jquery-1.11.3.min.js\"></script>\n\n","type":"blog","created_at":"2014-12-05T13:58:58.000Z","created_by":1,"updated_at":"2016-07-27T09:42:00.000Z","updated_by":1},{"id":21,"uuid":"3fbf8ed7-f425-4cf9-9021-8ec02dadd62a","key":"labs","value":"{}","type":"blog","created_at":"2015-01-12T22:20:01.000Z","created_by":1,"updated_at":"2016-07-27T09:42:00.000Z","updated_by":1},{"id":22,"uuid":"c9ffb702-3677-4ab2-bb0d-fa01a728d423","key":"navigation","value":"[{\"label\":\"Home\", \"url\":\"/\"}]","type":"blog","created_at":"2015-02-28T21:58:53.000Z","created_by":1,"updated_at":"2016-07-27T09:42:00.000Z","updated_by":1},{"id":23,"uuid":"803b1060-89e8-4a2f-b6d9-a318c4dcdd3e","key":"isPrivate","value":"false","type":"private","created_at":"2015-05-14T16:49:36.000Z","created_by":1,"updated_at":"2016-07-27T09:42:00.000Z","updated_by":1},{"id":24,"uuid":"09dbc411-ebf6-41cf-a345-7057d59e5543","key":"password","value":"","type":"private","created_at":"2015-05-14T16:49:36.000Z","created_by":1,"updated_at":"2016-07-27T09:42:01.000Z","updated_by":1},{"id":25,"uuid":"0bb0ff3e-dfd0-425e-a1b4-a15e46272612","key":"facebook","value":"","type":"blog","created_at":"2016-05-18T12:08:37.000Z","created_by":1,"updated_at":"2016-07-27T09:42:01.000Z","updated_by":1},{"id":26,"uuid":"bb3cc37b-f547-4e5e-a4f4-33ccd486d692","key":"slack","value":"[{\"url\":\"\"}]","type":"blog","created_at":"2016-05-18T12:08:37.000Z","created_by":1,"updated_at":"2016-07-27T09:42:01.000Z","updated_by":1},{"id":27,"uuid":"be3a27ed-6cbf-4c6a-af85-770246d8df4a","key":"twitter","value":"","type":"blog","created_at":"2016-05-18T12:08:37.000Z","created_by":1,"updated_at":"2016-07-27T09:42:01.000Z","updated_by":1},{"id":28,"uuid":"40cfbca4-659b-4359-99f0-430031100913","key":"migrations","value":"{\"006/01\":\"2016-07-27T09:42:02Z\"}","type":"core","created_at":"2016-07-27T09:41:55.000Z","created_by":1,"updated_at":"2016-07-27T09:42:02.000Z","updated_by":1},{"id":29,"uuid":"53dc3b05-8c42-4d63-a106-be65099fee0a","key":"seenNotifications","value":"[]","type":"core","created_at":"2016-07-27T08:41:55.000Z","created_by":1,"updated_at":"2016-07-27T09:42:01.000Z","updated_by":1},{"id":30,"uuid":"bc8d65d9-e3ea-4483-9838-d4458b1072a8","key":"activeTimezone","value":"Etc/UTC","type":"blog","created_at":"2016-07-27T08:41:55.000Z","created_by":1,"updated_at":"2016-07-27T09:42:02.000Z","updated_by":1}],"subscribers":[],"tags":[{"id":1,"uuid":"d4c9431b-d618-4322-a914-ba17d68aae9b","name":"questions","slug":"questions","description":"sometimes I just want to ask questions. Let me live!","parent_id":null,"meta_title":"Questions","meta_description":"Questions about life, love, happiness, and programming...in reverse order","created_at":"2014-03-08T07:36:52.000Z","created_by":1,"updated_at":"2016-01-24T20:12:41.000Z","updated_by":1,"image":null,"visibility":"public"},{"id":2,"uuid":"a93bb48c-c03e-469c-abb8-6a6ed8a01484","name":"bobby","slug":"bobby","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":"2014-03-08T21:40:20.000Z","created_by":1,"updated_at":"2014-03-08T21:40:20.000Z","updated_by":1,"image":null,"visibility":"public"},{"id":3,"uuid":"84f7e258-e7ec-4bad-adf8-c447f33e1a64","name":"rampage","slug":"rampage","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":"2014-03-08T21:40:20.000Z","created_by":1,"updated_at":"2014-03-08T21:40:20.000Z","updated_by":1,"image":null,"visibility":"public"},{"id":4,"uuid":"9565b1da-fc6b-40c4-9415-c42b93dbafd9","name":"sterling archer","slug":"sterling-archer","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":"2014-03-08T21:41:36.000Z","created_by":1,"updated_at":"2014-03-08T21:41:36.000Z","updated_by":1,"image":null,"visibility":"public"},{"id":5,"uuid":"502dd776-2460-43e0-9068-560521c27ed5","name":"backbone.js","slug":"backbone-js","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":"2014-03-10T20:55:07.000Z","created_by":1,"updated_at":"2014-03-10T20:55:07.000Z","updated_by":1,"image":null,"visibility":"public"},{"id":6,"uuid":"c5aa2d16-c33b-4f3e-b48f-b2c7850b80b9","name":"backstep","slug":"backstep","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":"2014-03-10T20:55:07.000Z","created_by":1,"updated_at":"2014-03-10T20:55:07.000Z","updated_by":1,"image":null,"visibility":"public"},{"id":7,"uuid":"617e767d-7074-4e92-9686-75a984028b33","name":"node.js","slug":"node-js","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":"2014-03-10T20:55:07.000Z","created_by":1,"updated_at":"2014-03-10T20:55:07.000Z","updated_by":1,"image":null,"visibility":"public"},{"id":8,"uuid":"7c76443f-5efa-4667-81b5-e1b9a5090bd0","name":"programming","slug":"programming","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":"2014-03-10T20:55:07.000Z","created_by":1,"updated_at":"2014-03-10T20:55:07.000Z","updated_by":1,"image":null,"visibility":"public"},{"id":9,"uuid":"0fec311c-6da6-44a8-80c2-6f2a5f47f422","name":"context switching","slug":"context-switching","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":"2014-03-13T19:38:45.000Z","created_by":1,"updated_at":"2014-03-13T19:38:45.000Z","updated_by":1,"image":null,"visibility":"public"},{"id":10,"uuid":"3dd97b3f-8cf7-4ee8-a39f-48b68798f64a","name":"python","slug":"python","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":"2014-03-16T21:43:18.000Z","created_by":1,"updated_at":"2014-03-16T21:43:18.000Z","updated_by":1,"image":null,"visibility":"public"},{"id":11,"uuid":"28c60bae-81bd-4463-a247-2d3730783f4c","name":"django","slug":"django","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":"2014-03-16T21:43:18.000Z","created_by":1,"updated_at":"2014-03-16T21:43:18.000Z","updated_by":1,"image":null,"visibility":"public"},{"id":12,"uuid":"d9d45e3e-1b5e-4372-a55e-36b8baf010c5","name":"java","slug":"java","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":"2014-03-16T21:43:18.000Z","created_by":1,"updated_at":"2014-03-16T21:43:18.000Z","updated_by":1,"image":null,"visibility":"public"},{"id":13,"uuid":"3d3f437b-68d7-4e7d-9d7f-4a8a8d60249d","name":"android","slug":"android","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":"2014-03-16T21:43:18.000Z","created_by":1,"updated_at":"2014-03-16T21:43:18.000Z","updated_by":1,"image":null,"visibility":"public"},{"id":14,"uuid":"6a285daf-6842-4e2f-a329-a7d2cfdd6209","name":"BJJ","slug":"bjj","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":"2014-03-19T05:39:56.000Z","created_by":1,"updated_at":"2014-03-19T05:39:56.000Z","updated_by":1,"image":null,"visibility":"public"},{"id":15,"uuid":"29ae0cf7-c74e-4b07-83f4-026160fd8c13","name":"time management","slug":"time-management","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":"2014-03-22T20:05:22.000Z","created_by":1,"updated_at":"2014-03-22T20:05:22.000Z","updated_by":1,"image":null,"visibility":"public"},{"id":16,"uuid":"e1ffef09-fc29-4156-99b2-9a8681888259","name":"ideas","slug":"ideas","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":"2014-03-28T21:17:12.000Z","created_by":1,"updated_at":"2014-03-28T21:17:12.000Z","updated_by":1,"image":null,"visibility":"public"},{"id":17,"uuid":"aa3ac87d-1806-4c38-98af-4c1e0a5379d7","name":"startups","slug":"startups","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":"2014-03-28T21:17:12.000Z","created_by":1,"updated_at":"2014-03-28T21:17:12.000Z","updated_by":1,"image":null,"visibility":"public"},{"id":18,"uuid":"782e1748-f835-43e6-a1df-b62f807999ee","name":"incubated","slug":"incubated","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":"2014-03-28T21:17:12.000Z","created_by":1,"updated_at":"2014-03-28T21:17:12.000Z","updated_by":1,"image":null,"visibility":"public"},{"id":19,"uuid":"09132902-2d5c-4e52-982a-4dca406765b7","name":"pipeline","slug":"pipeline","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":"2014-04-04T18:09:30.000Z","created_by":1,"updated_at":"2014-04-04T18:09:30.000Z","updated_by":1,"image":null,"visibility":"public"},{"id":20,"uuid":"ce03f7d6-a52e-4891-93c2-2f6f49cc33c6","name":"s3","slug":"s3","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":"2014-04-04T18:09:30.000Z","created_by":1,"updated_at":"2014-04-04T18:09:30.000Z","updated_by":1,"image":null,"visibility":"public"},{"id":21,"uuid":"5755266b-704f-4aa8-9fc8-01e0d313b6fe","name":"dev ops","slug":"dev-ops","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":"2014-04-04T18:09:30.000Z","created_by":1,"updated_at":"2014-04-04T18:09:30.000Z","updated_by":1,"image":null,"visibility":"public"},{"id":22,"uuid":"d67c9997-8fe0-498e-894f-879fb655bc56","name":"Scrubs","slug":"scrubs","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":"2014-04-12T19:41:37.000Z","created_by":1,"updated_at":"2014-04-12T19:41:37.000Z","updated_by":1,"image":null,"visibility":"public"},{"id":23,"uuid":"5a7b1001-6699-4bdf-9810-744c2662b44c","name":"music","slug":"music","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":"2014-04-21T18:08:48.000Z","created_by":1,"updated_at":"2014-04-21T18:08:48.000Z","updated_by":1,"image":null,"visibility":"public"},{"id":24,"uuid":"15331c8d-d0f6-46b7-ba19-2887caa34a07","name":"interviews","slug":"interviews","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":"2014-05-05T15:57:32.000Z","created_by":1,"updated_at":"2014-05-05T15:57:32.000Z","updated_by":1,"image":null,"visibility":"public"},{"id":25,"uuid":"42cf80b1-3b3f-4669-bd89-117cf3fdf59b","name":"rant","slug":"rant","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":"2014-05-05T15:57:32.000Z","created_by":1,"updated_at":"2014-05-05T15:57:32.000Z","updated_by":1,"image":null,"visibility":"public"},{"id":26,"uuid":"aa49c92c-ec6e-4fce-bd72-eab65d2064f0","name":"google analytics","slug":"google-analytics","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":"2014-08-03T23:25:19.000Z","created_by":1,"updated_at":"2014-08-03T23:25:19.000Z","updated_by":1,"image":null,"visibility":"public"},{"id":27,"uuid":"2b3853fd-2d67-4008-a4ca-06e4648b7b3b","name":"tutorial","slug":"tutorial","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":"2014-08-03T23:25:19.000Z","created_by":1,"updated_at":"2014-08-03T23:25:19.000Z","updated_by":1,"image":null,"visibility":"public"},{"id":28,"uuid":"4e5af89d-3692-4f14-b1af-ef6879d90ce3","name":"React","slug":"react","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":"2016-01-24T23:38:53.000Z","created_by":1,"updated_at":"2016-01-24T23:38:53.000Z","updated_by":1,"image":null,"visibility":"public"}],"users":[{"id":1,"uuid":"dabfc0d3-122d-451b-8ee9-9feb3c890715","name":"Bobby Steinbach","slug":"bobby-steinbach","password":"$2a$10$DzMk8Tmbb6jLpnVY0XxSceD1wu3jSuwjHAV93DrlDCmYqviqNh4BW","email":"steinbach.rj@gmail.com","image":"//www.gravatar.com/avatar/8cc2ef0e1b8c7cc374b3a8b3898c85cf?d=404","cover":"/content/images/2014/Mar/Backstep.png","bio":"Conciseness is key. I like to code. I enjoy building things, both digitally and physically. I've never loved to write. This blog will be a challenge. I like challenges.","website":"http://iambob.me","location":"New York","accessibility":null,"status":"active","language":"en_US","meta_title":null,"meta_description":null,"last_login":"2016-10-08T06:39:32.000Z","created_at":"2014-03-08T07:37:04.000Z","created_by":1,"updated_at":"2016-10-08T06:39:32.000Z","updated_by":1,"tour":null,"visibility":"public","facebook":null,"twitter":null}]}}]}